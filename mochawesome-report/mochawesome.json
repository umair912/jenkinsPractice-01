{
  "stats": {
    "suites": 68,
    "tests": 373,
    "passes": 351,
    "pending": 22,
    "failures": 0,
    "start": "2022-08-01T17:56:54.769Z",
    "end": "2022-08-01T17:56:57.145Z",
    "duration": 2376,
    "testsRegistered": 373,
    "passPercent": 100,
    "pendingPercent": 5.898123324396782,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ea1150b1-a6de-48d4-abbd-a5b464f1911f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "addDefaultMockHandlers();\nawait pactum.mock.start();",
          "err": {},
          "uuid": "bb3954db-638a-4eaf-b8ff-650c23461ac7",
          "parentUUID": "ea1150b1-a6de-48d4-abbd-a5b464f1911f",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await pactum.mock.stop();",
          "err": {},
          "uuid": "95c43a23-8451-454a-9b46-c0263a15c814",
          "parentUUID": "ea1150b1-a6de-48d4-abbd-a5b464f1911f",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
          "title": "BDD",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/bdd.spec.js",
          "file": "/test/component/bdd.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"BDD\"",
              "fullTitle": "BDD \"before all\" hook in \"BDD\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addExpectHandler('a user', (ctx) => {\n  const res = ctx.res;\n  expect(res).should.have.status(200);\n});\nhandler.addExpectHandler('a status 200', (ctx) => {\n  const res = ctx.res;\n  expect(res).should.have.status(200);\n});\nhandler.addExpectHandler('a status 400', (ctx) => {\n  const res = ctx.res;\n  expect(res).should.have.status(400);\n});",
              "err": {},
              "uuid": "18deab43-4c1a-48ee-bff8-07a0bde2a405",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Given a user with name snow",
              "fullTitle": "BDD Given a user with name snow",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "spec.useInteraction({\n  request: {\n    method: 'GET',\n    path: '/api/users'\n  },\n  response: {\n    status: 200,\n    headers: {\n      'set-cookie': 'name=snow'\n    },\n    body: {\n      name: 'snow'\n    }\n  }\n});",
              "err": {},
              "uuid": "2e4912db-e2c1-4851-bf8e-67b6b13f5221",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When a user is requested",
              "fullTitle": "BDD When a user is requested",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "spec.get('http://localhost:9393/api/users');",
              "err": {},
              "uuid": "58489776-af7d-45ac-aa51-89ba6e763242",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a response",
              "fullTitle": "BDD should return a response",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await spec.toss();",
              "err": {},
              "uuid": "dc907274-674a-474b-8f5f-9b289e7d67be",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status 200",
              "fullTitle": "BDD should return a status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.status(200);",
              "err": {},
              "uuid": "602b1b18-78d1-4567-9c8d-3219623d10dc",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a header",
              "fullTitle": "BDD should return a header",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.header('connection', 'close');\nexpect(response).to.have.headerContains('connection', 'cl');",
              "err": {},
              "uuid": "c618445e-70fd-438b-bc97-440b85170658",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return cookies",
              "fullTitle": "BDD should return cookies",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.cookiesLike('name', 'snow');\nexpect(response).to.have.cookies('name', 'snow');",
              "err": {},
              "uuid": "a354bd11-ee50-4290-81c7-e49b2581ffcb",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a valid user",
              "fullTitle": "BDD should return a valid user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.json({ name: 'snow' });\nexpect(response).should.have.jsonLike({ name: 'snow' });\nexpect(response).to.have.json('name', 'snow');\nexpect(response).to.have.jsonLike('name', 'snow');\nexpect(response).to.have.body({ name: 'snow' });\nspec.response().to.have.bodyContains(`snow`);",
              "err": {},
              "uuid": "1b056d7c-965e-4304-b325-27f12b466119",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a valid schema",
              "fullTitle": "BDD should return a valid schema",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonSchema({ properties: { name: { type: 'string' } } });",
              "err": {},
              "uuid": "833f0684-a167-4cb8-8e69-5a50e495fdf7",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a valid schema with options",
              "fullTitle": "BDD should return a valid schema with options",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonSchema(\n  {\n    properties: {\n      name: {\n        type: 'string',\n        format: 'only-snow'\n      }\n    }\n  },\n  {\n    formats: {\n      'only-snow': /^snow$/\n    }\n  }\n);",
              "err": {},
              "uuid": "2ae6ae2d-4100-4450-8baa-71bc27d858e2",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a valid schema at",
              "fullTitle": "BDD should return a valid schema at",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonSchema('.', { properties: { name: { type: 'string' } } });",
              "err": {},
              "uuid": "de2c28ee-ea8f-4ace-bc76-a191e8108bfb",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a valid schema at with options",
              "fullTitle": "BDD should return a valid schema at with options",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonSchema('.',\n  { properties: { name: { type: 'string', format: 'only-snow' } } },\n  {\n    formats: {\n      'only-snow': /^snow$/\n    }\n  }\n);",
              "err": {},
              "uuid": "0bff52d5-a51e-46ab-b046-3814189da7db",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a match",
              "fullTitle": "BDD should return a match",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonMatch(like({ name: 'snow' }));",
              "err": {},
              "uuid": "91b61fa1-49fa-49bc-8b05-599c7d65cc21",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a match at",
              "fullTitle": "BDD should return a match at",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonMatch('.', like({ name: 'snow' }));",
              "err": {},
              "uuid": "6aad2dd3-48eb-4e7d-a22a-ef2c7a011136",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a strict match",
              "fullTitle": "BDD should return a strict match",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonMatchStrict(like({ name: 'snow' }));",
              "err": {},
              "uuid": "b3d1ab48-fcc2-4f13-82c8-121db3eed4ac",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a strict match at",
              "fullTitle": "BDD should return a strict match at",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.jsonMatchStrict('.', like({ name: 'snow' }));",
              "err": {},
              "uuid": "60811e37-de92-4928-a3d3-54e9cba759f5",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a response within 500 ms",
              "fullTitle": "BDD should return a response within 500 ms",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response).to.have.responseTimeLessThan(1500);\nlet err;\ntry {\n  expect(response).to.have.responseTimeLessThan(0);\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;\ntry {\n  spec.response().to.have.responseTimeLessThan(0);\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;",
              "err": {},
              "uuid": "1aba6890-8581-486e-9b98-0b873634aa3c",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should run a custom expect handler",
              "fullTitle": "BDD should run a custom expect handler",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\nawait expect(response).to.have._('a user');\nawait expect(response).to.have._('a status 200');\ntry {\n  await expect(response).to.have._('a status 400');\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;",
              "err": {},
              "uuid": "2243cb0f-5a9a-4804-b182-2c53444bbed4",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return custom data",
              "fullTitle": "BDD should return custom data",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ce(spec.returns('name')).equals('snow');",
              "err": {},
              "uuid": "7faa9277-06b8-4932-b3b5-817564a37c30",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not have a json with length",
              "fullTitle": "BDD should not have a json with length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await expect(response).to.have.jsonLength(1);\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;",
              "err": {},
              "uuid": "a213ebb5-e4e3-4199-8222-7b658b644108",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not have a json with length at some path",
              "fullTitle": "BDD should not have a json with length at some path",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await expect(response).to.have.jsonLength('path', 1);\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;",
              "err": {},
              "uuid": "ac50e371-4b6c-47eb-951d-d54c52e45a6e",
              "parentUUID": "3a079a46-36f3-4bcf-92f8-89be90a6728f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e4912db-e2c1-4851-bf8e-67b6b13f5221",
            "58489776-af7d-45ac-aa51-89ba6e763242",
            "dc907274-674a-474b-8f5f-9b289e7d67be",
            "602b1b18-78d1-4567-9c8d-3219623d10dc",
            "c618445e-70fd-438b-bc97-440b85170658",
            "a354bd11-ee50-4290-81c7-e49b2581ffcb",
            "1b056d7c-965e-4304-b325-27f12b466119",
            "833f0684-a167-4cb8-8e69-5a50e495fdf7",
            "2ae6ae2d-4100-4450-8baa-71bc27d858e2",
            "de2c28ee-ea8f-4ace-bc76-a191e8108bfb",
            "0bff52d5-a51e-46ab-b046-3814189da7db",
            "91b61fa1-49fa-49bc-8b05-599c7d65cc21",
            "6aad2dd3-48eb-4e7d-a22a-ef2c7a011136",
            "b3d1ab48-fcc2-4f13-82c8-121db3eed4ac",
            "60811e37-de92-4928-a3d3-54e9cba759f5",
            "1aba6890-8581-486e-9b98-0b873634aa3c",
            "2243cb0f-5a9a-4804-b182-2c53444bbed4",
            "7faa9277-06b8-4932-b3b5-817564a37c30",
            "a213ebb5-e4e3-4199-8222-7b658b644108",
            "ac50e371-4b6c-47eb-951d-d54c52e45a6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 79,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
          "title": "BDD - AutoReportRunner Disabled",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/bdd.spec.js",
          "file": "/test/component/bdd.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"BDD - AutoReportRunner Disabled\"",
              "fullTitle": "BDD - AutoReportRunner Disabled \"before all\" hook in \"BDD - AutoReportRunner Disabled\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "settings.setReporterAutoRun(false);\nthis.spec = pactum.spec();\nthis.spec.useInteraction('default get');",
              "err": {},
              "uuid": "6cfd9e60-9da5-4ff0-b3a2-359d55614e2e",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"BDD - AutoReportRunner Disabled\"",
              "fullTitle": "BDD - AutoReportRunner Disabled \"after all\" hook in \"BDD - AutoReportRunner Disabled\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.spec.end();\nsettings.setReporterAutoRun(true);",
              "err": {},
              "uuid": "56fb5cf2-df1e-4bcc-ab22-38c70ed7b43d",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "get default",
              "fullTitle": "BDD - AutoReportRunner Disabled get default",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.spec.get('http://localhost:9393/default/get');",
              "err": {},
              "uuid": "d2a552dc-e0e6-4387-a158-3b44f0e15fff",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a response",
              "fullTitle": "BDD - AutoReportRunner Disabled should return a response",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await this.spec.toss();",
              "err": {},
              "uuid": "de01686f-f683-40d4-a38b-a22eb904e0ef",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status 200",
              "fullTitle": "BDD - AutoReportRunner Disabled should return a status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.spec.response().to.have.status(200);",
              "err": {},
              "uuid": "6feafc2b-649f-499d-a478-cdd74f63b31b",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return an error",
              "fullTitle": "BDD - AutoReportRunner Disabled should not return an error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  this.spec.response().should.have.error();\n} catch (error) {\n  err = error;\n}\nce(err).not.undefined;",
              "err": {},
              "uuid": "3517a7eb-62af-4a24-94e5-22ef0e375cbb",
              "parentUUID": "0fff7dd2-c667-4bb1-aa8b-1e30b5497b7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2a552dc-e0e6-4387-a158-3b44f0e15fff",
            "de01686f-f683-40d4-a38b-a22eb904e0ef",
            "6feafc2b-649f-499d-a478-cdd74f63b31b",
            "3517a7eb-62af-4a24-94e5-22ef0e375cbb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c7c14e1-5583-448b-a63c-a51793f46bba",
          "title": "JSON Placeholder",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/component.spec.js",
          "file": "/test/component/component.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET",
              "fullTitle": "JSON Placeholder GET",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "be0bdd3d-8d89-4a12-b2ef-bdb4aa130f62",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - with query",
              "fullTitle": "JSON Placeholder GET - with query",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "46e98c10-2c0d-409e-85ce-df30ad6e63cd",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - invalid post",
              "fullTitle": "JSON Placeholder GET - invalid post",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3e34000b-21b0-4040-b194-f48c3440b8ae",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST",
              "fullTitle": "JSON Placeholder POST",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "107b19f3-f07c-4dd4-a3e1-ae7a3b2f0c25",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - with headers",
              "fullTitle": "JSON Placeholder POST - with headers",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c6b7113a-9a26-4186-8991-ae4a2f7244a8",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - with body",
              "fullTitle": "JSON Placeholder POST - with body",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ca5db811-7f61-4993-aea7-9b51883ea84f",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT",
              "fullTitle": "JSON Placeholder PUT",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cd76a69f-0971-48dc-8b78-775a45f2a13c",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH",
              "fullTitle": "JSON Placeholder PATCH",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f709d5f3-1366-408b-b2f0-113ca76b8803",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE",
              "fullTitle": "JSON Placeholder DELETE",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "518a4100-a14f-4a46-89bc-e498697e0d5a",
              "parentUUID": "3c7c14e1-5583-448b-a63c-a51793f46bba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "be0bdd3d-8d89-4a12-b2ef-bdb4aa130f62",
            "46e98c10-2c0d-409e-85ce-df30ad6e63cd",
            "3e34000b-21b0-4040-b194-f48c3440b8ae",
            "107b19f3-f07c-4dd4-a3e1-ae7a3b2f0c25",
            "c6b7113a-9a26-4186-8991-ae4a2f7244a8",
            "ca5db811-7f61-4993-aea7-9b51883ea84f",
            "cd76a69f-0971-48dc-8b78-775a45f2a13c",
            "f709d5f3-1366-408b-b2f0-113ca76b8803",
            "518a4100-a14f-4a46-89bc-e498697e0d5a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "558b6c96-f987-424f-8b1a-2a09b76ce794",
          "title": "HTTP Bin - Status",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/component.spec.js",
          "file": "/test/component/component.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be ok",
              "fullTitle": "HTTP Bin - Status should be ok",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7a490cf0-9e1a-4aef-8a49-8cd4e722bbe7",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be created",
              "fullTitle": "HTTP Bin - Status should be created",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "26c92f03-9873-4a77-84be-230b4f1357ee",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be no content",
              "fullTitle": "HTTP Bin - Status should be no content",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7c80dd2a-c384-405b-a2da-7a9f9b9ca68f",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be not modified",
              "fullTitle": "HTTP Bin - Status should be not modified",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b3186b46-87f0-412b-a33f-85a68bd204ed",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be a bad request",
              "fullTitle": "HTTP Bin - Status should be a bad request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "77ef9ce0-cadd-49aa-b9d0-7be5444b46d7",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be unauthorized",
              "fullTitle": "HTTP Bin - Status should be unauthorized",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6406cbc9-4af2-42de-badd-37063e183800",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be forbidden",
              "fullTitle": "HTTP Bin - Status should be forbidden",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "02718370-2f7f-46f0-b77a-d4bca2993fac",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be not found",
              "fullTitle": "HTTP Bin - Status should be not found",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c3b5832d-eb7b-4e20-8bd6-5e7a002f463c",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be conflict",
              "fullTitle": "HTTP Bin - Status should be conflict",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ed03a268-8418-4627-88fd-02503def89c1",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be a teapot",
              "fullTitle": "HTTP Bin - Status should be a teapot",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6c4fcdd0-cd3e-4fd1-bc4e-ec66c46e8a33",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be internal system error",
              "fullTitle": "HTTP Bin - Status should be internal system error",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6596e596-e6b0-4fb3-8f9f-f8e07de85c86",
              "parentUUID": "558b6c96-f987-424f-8b1a-2a09b76ce794",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "7a490cf0-9e1a-4aef-8a49-8cd4e722bbe7",
            "26c92f03-9873-4a77-84be-230b4f1357ee",
            "7c80dd2a-c384-405b-a2da-7a9f9b9ca68f",
            "b3186b46-87f0-412b-a33f-85a68bd204ed",
            "77ef9ce0-cadd-49aa-b9d0-7be5444b46d7",
            "6406cbc9-4af2-42de-badd-37063e183800",
            "02718370-2f7f-46f0-b77a-d4bca2993fac",
            "c3b5832d-eb7b-4e20-8bd6-5e7a002f463c",
            "ed03a268-8418-4627-88fd-02503def89c1",
            "6c4fcdd0-cd3e-4fd1-bc4e-ec66c46e8a33",
            "6596e596-e6b0-4fb3-8f9f-f8e07de85c86"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7a546f00-840e-4290-aafe-05cc43be6e1b",
          "title": "HTTP Bin - Responses",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/component.spec.js",
          "file": "/test/component/component.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be deny",
              "fullTitle": "HTTP Bin - Responses should be deny",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "eb9c59cd-4235-40da-b451-c4db95ef01af",
              "parentUUID": "7a546f00-840e-4290-aafe-05cc43be6e1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be deny",
              "fullTitle": "HTTP Bin - Responses should be deny",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "093a9194-cb47-4cab-be4a-f1ec5deba64e",
              "parentUUID": "7a546f00-840e-4290-aafe-05cc43be6e1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "eb9c59cd-4235-40da-b451-c4db95ef01af",
            "093a9194-cb47-4cab-be4a-f1ec5deba64e"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "184260f6-2f68-43e2-ba39-a4cebfa64534",
          "title": "Cookies",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/cookies.spec.js",
          "file": "/test/component/cookies.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "sending cookies as key-value pair",
              "fullTitle": "Cookies sending cookies as key-value pair",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/army',\n      headers: {\n        cookie: 'name=snow'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'set-cookie': 'name=snow',\n      },\n      body: {\n        Name: 'Golden Army',\n        Count: 10000,\n        Alliance: 'Stark',\n      },\n    },\n  })\n  .get('http://localhost:9393/api/army')\n  .withCookies('name', 'snow')\n  .expectStatus(200)\n  .expectCookiesLike('name', 'snow');",
              "err": {},
              "uuid": "bcc7dd6d-c48a-4c1e-bc0c-b62d4066b5dc",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sending cookies as string",
              "fullTitle": "Cookies sending cookies as string",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/army',\n      headers: {\n        cookie: 'name=snow'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'set-cookie': 'name=snow',\n      },\n      body: {\n        Name: 'Golden Army',\n        Count: 10000,\n        Alliance: 'Stark',\n      },\n    },\n  })\n  .get('http://localhost:9393/api/army')\n  .withCookies('name=snow')\n  .expectStatus(200)\n  .expectCookies('name=snow');",
              "err": {},
              "uuid": "9d3416df-15f6-4592-8a28-af2a4f78e37f",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sending cookies as object",
              "fullTitle": "Cookies sending cookies as object",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/army',\n      headers: {\n        cookie: 'name=snow'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'set-cookie': 'name=snow',\n      },\n      body: {\n        Name: 'Golden Army',\n        Count: 10000,\n        Alliance: 'Stark',\n      },\n    },\n  })\n  .get('http://localhost:9393/api/army')\n  .withCookies({ name: 'snow' })\n  .expectStatus(200)\n  .expectCookies({ name: 'snow' });",
              "err": {},
              "uuid": "6fa6e1e5-6fe0-4886-8626-2736827263bb",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sending multiple cookies & assert multiple cookies",
              "fullTitle": "Cookies sending multiple cookies & assert multiple cookies",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/army',\n      headers: {\n        cookie: 'name=snow;httpOnly;foo=bar;bro'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'set-cookie': 'name=snow;httpOnly;foo=bar',\n      },\n      body: {\n        Name: 'Golden Army',\n        Count: 10000,\n        Alliance: 'Stark',\n      },\n    },\n  })\n  .get('http://localhost:9393/api/army')\n  .withCookies({ name: 'snow', httpOnly: null })\n  .withCookies('foo', 'bar')\n  .withCookies('bro')\n  .expectStatus(200)\n  .expectCookiesLike('name', 'snow')\n  .expectCookiesLike('httpOnly')\n  .expectCookiesLike('foo', 'bar')\n  .expectCookies('foo=bar;name=snow;httpOnly');",
              "err": {},
              "uuid": "f4c64989-6cd9-4120-842d-b735da90a24e",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set-cookie key not found in response - expectCookie",
              "fullTitle": "Cookies set-cookie key not found in response - expectCookie",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum\n    .spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/army'\n      },\n      response: {\n        status: 200\n      },\n    })\n    .get('http://localhost:9393/api/army')\n    .expectStatus(200)\n    .expectCookiesLike('name', 'snow');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`'set-cookie' key not found in response headers`);",
              "err": {},
              "uuid": "96562f99-f24e-4774-b996-ca2d25ab3ce1",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set-cookie key not found in response - expectCookies",
              "fullTitle": "Cookies set-cookie key not found in response - expectCookies",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum\n    .spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/army'\n      },\n      response: {\n        status: 200\n      },\n    })\n    .get('http://localhost:9393/api/army')\n    .expectStatus(200)\n    .expectCookies('name', 'snow');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`'set-cookie' key not found in response headers`);",
              "err": {},
              "uuid": "fd2bce50-429e-4c40-a940-ac08df557e78",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expected cookie not found in response - expectCookie",
              "fullTitle": "Cookies expected cookie not found in response - expectCookie",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum\n    .spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/army'\n      },\n      response: {\n        status: 200,\n        headers: {\n          'set-cookie': 'httpOnly'\n        }\n      },\n    })\n    .get('http://localhost:9393/api/army')\n    .expectStatus(200)\n    .expectCookiesLike('name', 'snow');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Cookie doesn't have property 'name' at '$'`);",
              "err": {},
              "uuid": "94f55956-34b2-4d0a-98f6-fb30b94d957e",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expected cookie not found in response - expectCookies",
              "fullTitle": "Cookies expected cookie not found in response - expectCookies",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum\n    .spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/army'\n      },\n      response: {\n        status: 200,\n        headers: {\n          'set-cookie': 'httpOnly;name=snow'\n        }\n      },\n    })\n    .get('http://localhost:9393/api/army')\n    .expectStatus(200)\n    .expectCookies('name', 'snow');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).not.undefined;",
              "err": {},
              "uuid": "cfe6aafa-0f3a-4a8f-8ce6-9e7e783c9c3d",
              "parentUUID": "184260f6-2f68-43e2-ba39-a4cebfa64534",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcc7dd6d-c48a-4c1e-bc0c-b62d4066b5dc",
            "9d3416df-15f6-4592-8a28-af2a4f78e37f",
            "6fa6e1e5-6fe0-4886-8626-2736827263bb",
            "f4c64989-6cd9-4120-842d-b735da90a24e",
            "96562f99-f24e-4774-b996-ca2d25ab3ce1",
            "fd2bce50-429e-4c40-a940-ac08df557e78",
            "94f55956-34b2-4d0a-98f6-fb30b94d957e",
            "cfe6aafa-0f3a-4a8f-8ce6-9e7e783c9c3d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
          "title": "Mock - Default Mock Interaction",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/default.spec.js",
          "file": "/test/component/default.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Mock - Default Mock Interaction\"",
              "fullTitle": "Mock - Default Mock Interaction \"before all\" hook in \"Mock - Default Mock Interaction\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.addInteraction({\n  id: 'GET_FIRST_PROJECT',\n  request: {\n    method: 'GET',\n    path: '/api/projects/1'\n  },\n  response: {\n    status: 200,\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: {\n      id: 1,\n      name: 'fake'\n    }\n  }\n});\nmock.addInteraction({\n  request: {\n    method: 'GET',\n    path: '/api/projects/2',\n    queryParams: {\n      id: 2,\n      name: 'fake'\n    }\n  },\n  response: {\n    status: 200,\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: {\n      id: 1,\n      name: 'bake'\n    }\n  }\n});\nmock.addInteraction({\n  strict: false,\n  request: {\n    method: 'POST',\n    path: '/api/projects'\n  },\n  response: {\n    status: 200,\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: {\n      message: 'ok'\n    }\n  }\n});",
              "err": {},
              "uuid": "c1a10b0e-382f-453f-8411-0d9d40c5ab45",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Mock - Default Mock Interaction\"",
              "fullTitle": "Mock - Default Mock Interaction \"after all\" hook in \"Mock - Default Mock Interaction\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.clearInteractions();",
              "err": {},
              "uuid": "ce1b3d05-13ba-4c16-b8ca-7f9ca4cd1d63",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET - one interaction",
              "fullTitle": "Mock - Default Mock Interaction GET - one interaction",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(mock.getInteraction('GET_FIRST_PROJECT').callCount).equals(0, 'interaction should not be called');\nexpect(mock.getInteraction('GET_FIRST_PROJECT').exercised).equals(false, 'interaction should not be exercised');\nawait pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  });\nexpect(mock.getInteraction('GET_FIRST_PROJECT').callCount).equals(1, 'interaction should be called once');\nexpect(mock.getInteraction('GET_FIRST_PROJECT').exercised).equals(true, 'interaction should be exercised');\nawait pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200);\nexpect(mock.getInteraction('GET_FIRST_PROJECT').callCount).equals(2, 'interaction should be called twice');\nexpect(mock.getInteraction('GET_FIRST_PROJECT').exercised).equals(true, 'interaction should be exercised');",
              "err": {},
              "uuid": "2656f002-a7fe-4821-a981-c94fabb92329",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with multiple queries",
              "fullTitle": "Mock - Default Mock Interaction GET - one interaction - with multiple queries",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/2')\n  .withQueryParams('id', 2)\n  .withQueryParams('name', 'fake')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'bake'\n  })\n  .toss();",
              "err": {},
              "uuid": "5cdea2a3-5843-4fe1-9de0-f6f79e600f86",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with ignore body",
              "fullTitle": "Mock - Default Mock Interaction POST - one interaction - with ignore body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/projects')\n  .withJson({\n    id: 1,\n    title: 'new fake'\n  })\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "7b65fda4-3215-41f7-ad9a-b2c7c22afc85",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - overwrite default",
              "fullTitle": "Mock - Default Mock Interaction GET - one interaction - overwrite default",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 3,\n        name: 'overwrite'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 3,\n    name: 'overwrite'\n  })\n  .toss();",
              "err": {},
              "uuid": "0f1705f8-02dc-4614-a2b8-ef303ecbf178",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - get default interaction",
              "fullTitle": "Mock - Default Mock Interaction GET - one interaction - get default interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "c6786e38-9fe0-4a15-ac44-b8490b8897ed",
              "parentUUID": "d1086ea4-f8d4-4eec-b533-84ae85cb5141",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2656f002-a7fe-4821-a981-c94fabb92329",
            "5cdea2a3-5843-4fe1-9de0-f6f79e600f86",
            "7b65fda4-3215-41f7-ad9a-b2c7c22afc85",
            "0f1705f8-02dc-4614-a2b8-ef303ecbf178",
            "c6786e38-9fe0-4a15-ac44-b8490b8897ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "70e6e32a-258f-4d49-b284-44e331ed86b9",
          "title": "Mock - Default Mock Interactions",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/default.spec.js",
          "file": "/test/component/default.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Mock - Default Mock Interactions\"",
              "fullTitle": "Mock - Default Mock Interactions \"before all\" hook in \"Mock - Default Mock Interactions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.addInteraction([\n  {\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  }\n]);\nmock.addInteraction([{\n  request: {\n    method: 'GET',\n    path: '/api/projects/1',\n    queryParams: {\n      id: 1,\n      name: 'fake'\n    }\n  },\n  response: {\n    status: 200,\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: {\n      id: 1,\n      name: 'bake'\n    }\n  }\n}]);\nmock.addInteraction([{\n  strict: false,\n  request: {\n    method: 'POST',\n    path: '/api/projects'\n  },\n  response: {\n    status: 200,\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: {\n      message: 'ok'\n    }\n  }\n}]);",
              "err": {},
              "uuid": "a8a3f5de-5ecf-4b6f-8476-225478b76394",
              "parentUUID": "70e6e32a-258f-4d49-b284-44e331ed86b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Mock - Default Mock Interactions\"",
              "fullTitle": "Mock - Default Mock Interactions \"after all\" hook in \"Mock - Default Mock Interactions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.clearInteractions();",
              "err": {},
              "uuid": "f94d94c4-254c-4b5a-8976-d2cf1a5ef4c2",
              "parentUUID": "70e6e32a-258f-4d49-b284-44e331ed86b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET - one interaction",
              "fullTitle": "Mock - Default Mock Interactions GET - one interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "84270062-8c6b-4921-9bea-8ac8967cd69f",
              "parentUUID": "70e6e32a-258f-4d49-b284-44e331ed86b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with multiple queries",
              "fullTitle": "Mock - Default Mock Interactions GET - one interaction - with multiple queries",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'fake')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'bake'\n  })\n  .toss();",
              "err": {},
              "uuid": "70137919-71bb-42ec-afb2-3225c18c78e2",
              "parentUUID": "70e6e32a-258f-4d49-b284-44e331ed86b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with ignore body",
              "fullTitle": "Mock - Default Mock Interactions POST - one interaction - with ignore body",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/projects')\n  .withJson({\n    id: 1,\n    title: 'new fake'\n  })\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "6bdd2bdd-c8b8-4d4a-a9a7-afda52c27d3d",
              "parentUUID": "70e6e32a-258f-4d49-b284-44e331ed86b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84270062-8c6b-4921-9bea-8ac8967cd69f",
            "70137919-71bb-42ec-afb2-3225c18c78e2",
            "6bdd2bdd-c8b8-4d4a-a9a7-afda52c27d3d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "00cde787-9b3f-49fc-8e90-e434364d40dc",
          "title": "Mock - Defaults",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/default.spec.js",
          "file": "/test/component/default.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Mock - Defaults\"",
              "fullTitle": "Mock - Defaults \"after each\" hook in \"Mock - Defaults\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setBaseUrl('');\npactum.request.setDefaultTimeout(3000);\nconfig.request.headers = {};",
              "err": {},
              "uuid": "7e19fc4c-838f-40a0-b434-b8b66aa43012",
              "parentUUID": "00cde787-9b3f-49fc-8e90-e434364d40dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "request - setBaseUrl",
              "fullTitle": "Mock - Defaults request - setBaseUrl",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setBaseUrl('http://localhost:9393');\nawait pactum.spec()\n  .get('/api')\n  .expectStatus(404);",
              "err": {},
              "uuid": "5d82ff85-c015-4341-b3a4-0d8baf0b2ea7",
              "parentUUID": "00cde787-9b3f-49fc-8e90-e434364d40dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "request - setDefaultTimeout",
              "fullTitle": "Mock - Defaults request - setDefaultTimeout",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setDefaultTimeout(2000);\nawait pactum.spec()\n  .get('http://localhost:9393/api')\n  .expectStatus(404);",
              "err": {},
              "uuid": "0e3ccb7a-db46-420d-abec-399c0bfc52e2",
              "parentUUID": "00cde787-9b3f-49fc-8e90-e434364d40dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "request - setDefaultHeader",
              "fullTitle": "Mock - Defaults request - setDefaultHeader",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setDefaultHeaders('content-type', 'application/json');\nawait pactum.spec()\n  .get('http://localhost:9393/api')\n  .expectStatus(404);",
              "err": {},
              "uuid": "29cd7d6d-6aee-4e81-a666-a17ce8dd64b0",
              "parentUUID": "00cde787-9b3f-49fc-8e90-e434364d40dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "settings - setLogLevel",
              "fullTitle": "Mock - Defaults settings - setLogLevel",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.settings.setLogLevel('INFO');\nawait pactum.spec()\n  .get('http://localhost:9393/api')\n  .expectStatus(404);",
              "err": {},
              "uuid": "8e3df264-4026-465a-9dd0-fbb2b0711033",
              "parentUUID": "00cde787-9b3f-49fc-8e90-e434364d40dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d82ff85-c015-4341-b3a4-0d8baf0b2ea7",
            "0e3ccb7a-db46-420d-abec-399c0bfc52e2",
            "29cd7d6d-6aee-4e81-a666-a17ce8dd64b0",
            "8e3df264-4026-465a-9dd0-fbb2b0711033"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a6e9d4ae-8c91-4428-bd49-98614654da04",
          "title": "OnCall - Mock Interactions",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/default.spec.js",
          "file": "/test/component/default.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"OnCall - Mock Interactions\"",
              "fullTitle": "OnCall - Mock Interactions \"before all\" hook in \"OnCall - Mock Interactions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.addInteraction({\n  request: {\n    method: 'GET',\n    path: '/api/projects/1'\n  },\n  response: {\n    status: 204,\n    onCall: {\n      0: {\n        status: 200\n      },\n      \"1\": {\n        status: 201\n      },\n      2: {\n        status: 202\n      },\n      5: {\n        status: 500\n      }\n    }\n  }\n});",
              "err": {},
              "uuid": "310a98b4-4cb5-4378-aa54-19ced88ae87d",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Call - 0",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 0",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "cd34f45c-e949-4d80-aa56-05760e39ff21",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Call - 1",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(201)\n  .toss();",
              "err": {},
              "uuid": "4e2f02e1-54d3-45d7-992d-dbe8f7a7860b",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Call - 2",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(202)\n  .toss();",
              "err": {},
              "uuid": "e64ddd1e-ea83-477c-aa15-99bdcd99ed87",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Call - 3",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 3",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(204)\n  .toss();",
              "err": {},
              "uuid": "83420462-1785-4c6d-b88b-098cc9a9f2c3",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Call - 4",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 4",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(204)\n  .toss();",
              "err": {},
              "uuid": "002edc48-d78c-46c7-87cc-441abb40c496",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Call - 5",
              "fullTitle": "OnCall - Mock Interactions GET - Call - 5",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(500)\n  .toss();",
              "err": {},
              "uuid": "323ce968-d347-4585-8756-ecb25b78375a",
              "parentUUID": "a6e9d4ae-8c91-4428-bd49-98614654da04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd34f45c-e949-4d80-aa56-05760e39ff21",
            "4e2f02e1-54d3-45d7-992d-dbe8f7a7860b",
            "e64ddd1e-ea83-477c-aa15-99bdcd99ed87",
            "83420462-1785-4c6d-b88b-098cc9a9f2c3",
            "002edc48-d78c-46c7-87cc-441abb40c496",
            "323ce968-d347-4585-8756-ecb25b78375a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "30481b6f-2dc6-4237-9bb5-0931cbc6ab91",
          "title": "Deprecated",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/deprecated.spec.js",
          "file": "/test/component/deprecated.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "expects",
              "fullTitle": "Deprecated expects",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get people')\n  .get('http://localhost:9393/api/people')\n  .expectJsonAt('people[0].name', 'Matt')\n  .expectJsonLikeAt('people[0].name', 'Matt')\n  .expectJsonMatchAt('people[0].name', 'Matt')\n  .expectJsonMatchStrictAt('people[0].name', 'Matt')\n  .expectJsonSchemaAt('people[0].name', { type: 'string' });",
              "err": {},
              "uuid": "f563d65e-e64a-4aaf-b25d-b4ee1e737431",
              "parentUUID": "30481b6f-2dc6-4237-9bb5-0931cbc6ab91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f563d65e-e64a-4aaf-b25d-b4ee1e737431"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "766fe123-ae96-45cc-b463-5b1774db64b2",
          "title": "Dynamic",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/dynamic.spec.js",
          "file": "/test/component/dynamic.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - without query",
              "fullTitle": "Dynamic GET - without query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: function (req, res) {\n      res.status(200);\n      res.send({\n        id: 1,\n        name: 'fake'\n      });\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "c476bac1-85aa-40a8-aa62-5602d18adad6",
              "parentUUID": "766fe123-ae96-45cc-b463-5b1774db64b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - with query",
              "fullTitle": "Dynamic GET - with query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        id: 1\n      }\n    },\n    response: function (req, res) {\n      res.status(200);\n      res.send({\n        id: 1,\n        name: 'fake'\n      });\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('id', '1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "8ee0cd12-feb3-43b0-bbba-da5eb05c2a09",
              "parentUUID": "766fe123-ae96-45cc-b463-5b1774db64b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - ignore query - first record",
              "fullTitle": "Dynamic GET - ignore query - first record",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/api/projects'\n    },\n    response: function (req, res) {\n      const response = [\n        {\n          id: 1,\n          name: 'fake'\n        },\n        {\n          id: 2,\n          name: 'fake'\n        }\n      ];\n      res.status(200);\n      if (req.query.id === '1') {\n        res.send(response[0]);\n      } else {\n        res.send(response[1]);\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects')\n  .withQueryParams('id', '1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "7cc50d3b-3844-4ff6-92ad-f3890d54d2d0",
              "parentUUID": "766fe123-ae96-45cc-b463-5b1774db64b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - ignore query - second record",
              "fullTitle": "Dynamic GET - ignore query - second record",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: function (req, res) {\n      const response = [\n        {\n          id: 1,\n          name: 'fake'\n        },\n        {\n          id: 2,\n          name: 'bake'\n        }\n      ];\n      res.status(200);\n      if (req.query.id === '1') {\n        res.send(response[0]);\n      } else {\n        res.send(response[1]);\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('id', '2')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 2,\n    name: 'bake'\n  })\n  .toss();",
              "err": {},
              "uuid": "23a7b97a-f625-44b3-bef7-9656ceb54299",
              "parentUUID": "766fe123-ae96-45cc-b463-5b1774db64b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c476bac1-85aa-40a8-aa62-5602d18adad6",
            "8ee0cd12-feb3-43b0-bbba-da5eb05c2a09",
            "7cc50d3b-3844-4ff6-92ad-f3890d54d2d0",
            "23a7b97a-f625-44b3-bef7-9656ceb54299"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7b5588d9-088d-439a-96f9-a75d20714d03",
          "title": "E2E",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
          "file": "/test/component/e2e.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"E2E\"",
              "fullTitle": "E2E \"before all\" hook in \"E2E\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addInteractionHandler('get user', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1,\n      }\n    }\n  };\n});\nhandler.addInteractionHandler('save user', () => {\n  return {\n    request: {\n      method: 'POST',\n      path: '/api/users',\n    },\n    response: {\n      status: 200,\n    }\n  };\n});\nhandler.addInteractionHandler('delete user', () => {\n  return {\n    request: {\n      method: 'DELETE',\n      path: '/api/users/1',\n    },\n    response: {\n      status: 200,\n    }\n  };\n});\nhandler.addSpecHandler('User.AddUser', (ctx) => {\n  const spec = ctx.spec;\n  spec.useInteraction('save user');\n  spec.post('http://localhost:9393/api/users');\n  spec.expectStatus(200);\n});\nhandler.addSpecHandler('User.DeleteUser', (ctx) => {\n  const spec = ctx.spec;\n  spec.useInteraction('delete user');\n  spec.delete('http://localhost:9393/api/users/1');\n  spec.expectStatus(200);\n});\nhandler.addSpecHandler('User.GetUser', (ctx) => {\n  const spec = ctx.spec;\n  spec.useInteraction('get user');\n  spec.get('http://localhost:9393/api/users/1');\n  spec.expectStatus(200);\n});",
              "err": {},
              "uuid": "7ef0c19b-0eb9-48b3-83c1-faacc41aaf09",
              "parentUUID": "7b5588d9-088d-439a-96f9-a75d20714d03",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"E2E\"",
              "fullTitle": "E2E \"after all\" hook in \"E2E\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "71f30a59-59c7-4e68-b407-e8223f23184c",
              "parentUUID": "7b5588d9-088d-439a-96f9-a75d20714d03",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c5b0c384-a29d-4ec2-922b-8717864fd6a6",
              "title": "E2E - All Passed",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - All Passed\"",
                  "fullTitle": "E2E E2E - All Passed \"before all\" hook in \"E2E - All Passed\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User All Passed');",
                  "err": {},
                  "uuid": "a28a1ad1-f596-4984-acbc-920a08bcd835",
                  "parentUUID": "c5b0c384-a29d-4ec2-922b-8717864fd6a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save user",
                  "fullTitle": "E2E E2E - All Passed save user",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Save User')\n  .spec()\n  .useInteraction('save user')\n  .post('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .clean()\n  .useInteraction('delete user')\n  .delete('http://localhost:9393/api/users/1')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "ad3a3eb1-dbe2-49cc-8385-f504d58c092e",
                  "parentUUID": "c5b0c384-a29d-4ec2-922b-8717864fd6a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get user",
                  "fullTitle": "E2E E2E - All Passed get user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Get User')\n  .spec()\n  .useInteraction('get user')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "3dc90276-0c2e-4af6-9293-3e95213c5be4",
                  "parentUUID": "c5b0c384-a29d-4ec2-922b-8717864fd6a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "clean up",
                  "fullTitle": "E2E E2E - All Passed clean up",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.cleanup();",
                  "err": {},
                  "uuid": "148ed5e2-f523-4ad1-8138-621dc39398ef",
                  "parentUUID": "c5b0c384-a29d-4ec2-922b-8717864fd6a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad3a3eb1-dbe2-49cc-8385-f504d58c092e",
                "3dc90276-0c2e-4af6-9293-3e95213c5be4",
                "148ed5e2-f523-4ad1-8138-621dc39398ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "debad6c8-bdce-4bfb-b7f7-1c2069be6c1e",
              "title": "E2E - First Step Failed",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - First Step Failed\"",
                  "fullTitle": "E2E E2E - First Step Failed \"before all\" hook in \"E2E - First Step Failed\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User First Step Failed');",
                  "err": {},
                  "uuid": "42ebbee3-61e5-42fb-ad38-db4e65894d69",
                  "parentUUID": "debad6c8-bdce-4bfb-b7f7-1c2069be6c1e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save user",
                  "fullTitle": "E2E E2E - First Step Failed save user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let err;\ntry {\n  await this.e2e.step('Save User')\n    .spec()\n    .useInteraction('save user')\n    .post('http://localhost:9393/api/users')\n    .expectStatus(400)\n    .clean()\n    .useInteraction('delete user')\n    .delete('http://localhost:9393/api/users/1')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
                  "err": {},
                  "uuid": "8fb4c23c-568f-4d19-aa07-3b98919460ec",
                  "parentUUID": "debad6c8-bdce-4bfb-b7f7-1c2069be6c1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should skip this `e2e.step`",
                  "fullTitle": "E2E E2E - First Step Failed should skip this `e2e.step`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Get User')\n  .spec()\n  .useInteraction('get user')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(400);",
                  "err": {},
                  "uuid": "40fe386f-bd8d-4955-94c6-66e590d0e706",
                  "parentUUID": "debad6c8-bdce-4bfb-b7f7-1c2069be6c1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "clean up",
                  "fullTitle": "E2E E2E - First Step Failed clean up",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.cleanup();",
                  "err": {},
                  "uuid": "1de7fed9-8e16-4a7e-a82e-a57d941421e8",
                  "parentUUID": "debad6c8-bdce-4bfb-b7f7-1c2069be6c1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fb4c23c-568f-4d19-aa07-3b98919460ec",
                "40fe386f-bd8d-4955-94c6-66e590d0e706",
                "1de7fed9-8e16-4a7e-a82e-a57d941421e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
              "title": "E2E - One Clean Up Failed",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - One Clean Up Failed\"",
                  "fullTitle": "E2E E2E - One Clean Up Failed \"before all\" hook in \"E2E - One Clean Up Failed\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add Multiple Users');",
                  "err": {},
                  "uuid": "0819d45a-2648-46e3-9e65-ba8833eb9db0",
                  "parentUUID": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save user one",
                  "fullTitle": "E2E E2E - One Clean Up Failed save user one",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Save User One')\n  .spec()\n  .useInteraction('save user')\n  .post('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .clean()\n  .useInteraction('delete user')\n  .delete('http://localhost:9393/api/users/1')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "728a73cc-e5b5-426c-aa03-71a076d4f208",
                  "parentUUID": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "save user two",
                  "fullTitle": "E2E E2E - One Clean Up Failed save user two",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Save User One')\n  .spec()\n  .useInteraction('save user')\n  .post('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .clean()\n  .useInteraction('delete user')\n  .delete('http://localhost:9393/api/users/1')\n  .expectStatus(400);",
                  "err": {},
                  "uuid": "22fc003f-d2c7-4018-ace6-892f87f34e9e",
                  "parentUUID": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get user",
                  "fullTitle": "E2E E2E - One Clean Up Failed get user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Get User')\n  .spec()\n  .useInteraction('get user')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "8c57f425-62a8-4664-b30c-e7a375b745eb",
                  "parentUUID": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "clean up",
                  "fullTitle": "E2E E2E - One Clean Up Failed clean up",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let err;\ntry {\n  await this.e2e.cleanup();\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
                  "err": {},
                  "uuid": "7f74d02a-f4da-4e45-ad23-34d039a48ae9",
                  "parentUUID": "4f63375c-2926-4cd0-9338-9427b1f8c8ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "728a73cc-e5b5-426c-aa03-71a076d4f208",
                "22fc003f-d2c7-4018-ace6-892f87f34e9e",
                "8c57f425-62a8-4664-b30c-e7a375b745eb",
                "7f74d02a-f4da-4e45-ad23-34d039a48ae9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "203499e0-b132-4e53-8869-1216ef50f1ea",
              "title": "E2E - All Clean Ups Failed",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - All Clean Ups Failed\"",
                  "fullTitle": "E2E E2E - All Clean Ups Failed \"before all\" hook in \"E2E - All Clean Ups Failed\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add Multiple Users');",
                  "err": {},
                  "uuid": "b0d60d85-228f-4081-8aac-f82098fbd174",
                  "parentUUID": "203499e0-b132-4e53-8869-1216ef50f1ea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save user one",
                  "fullTitle": "E2E E2E - All Clean Ups Failed save user one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Save User One')\n  .spec()\n  .useInteraction('save user')\n  .post('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .clean()\n  .useInteraction('delete user')\n  .delete('http://localhost:9393/api/users/1')\n  .expectStatus(400);",
                  "err": {},
                  "uuid": "cdeb95d5-c079-4e7f-907b-9da0e3def607",
                  "parentUUID": "203499e0-b132-4e53-8869-1216ef50f1ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "save user two",
                  "fullTitle": "E2E E2E - All Clean Ups Failed save user two",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Save User Two')\n  .spec()\n  .useInteraction('save user')\n  .post('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .clean()\n  .useInteraction('delete user')\n  .delete('http://localhost:9393/api/users/1')\n  .expectStatus(400);",
                  "err": {},
                  "uuid": "d3d4e9ee-b7ca-4825-b9ea-dc5f10421469",
                  "parentUUID": "203499e0-b132-4e53-8869-1216ef50f1ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get user",
                  "fullTitle": "E2E E2E - All Clean Ups Failed get user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.step('Get User')\n  .spec()\n  .useInteraction('get user')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "d94128ba-8e1c-4672-94e1-56ed2231b1a6",
                  "parentUUID": "203499e0-b132-4e53-8869-1216ef50f1ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "clean up",
                  "fullTitle": "E2E E2E - All Clean Ups Failed clean up",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let err;\ntry {\n  await this.e2e.cleanup();\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
                  "err": {},
                  "uuid": "49294986-07b6-486d-bc21-6778a515b8be",
                  "parentUUID": "203499e0-b132-4e53-8869-1216ef50f1ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdeb95d5-c079-4e7f-907b-9da0e3def607",
                "d3d4e9ee-b7ca-4825-b9ea-dc5f10421469",
                "d94128ba-8e1c-4672-94e1-56ed2231b1a6",
                "49294986-07b6-486d-bc21-6778a515b8be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1f14a534-4b35-48f8-944d-c403e07c17ec",
              "title": "E2E - Using Spec Handlers",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - Using Spec Handlers\"",
                  "fullTitle": "E2E E2E - Using Spec Handlers \"before all\" hook in \"E2E - Using Spec Handlers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User All Clean Ups Failed');",
                  "err": {},
                  "uuid": "0a9e2ef4-71ae-4aaf-9cf8-c967e28072d8",
                  "parentUUID": "1f14a534-4b35-48f8-944d-c403e07c17ec",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save user",
                  "fullTitle": "E2E E2E - Using Spec Handlers save user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e\n  .step('Save User')\n  .spec('User.AddUser')\n  .clean('User.DeleteUser');",
                  "err": {},
                  "uuid": "ff55b8a7-e8a9-418e-b07b-34764cde4d2b",
                  "parentUUID": "1f14a534-4b35-48f8-944d-c403e07c17ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "get user",
                  "fullTitle": "E2E E2E - Using Spec Handlers get user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e\n  .step('Get User')\n  .spec('User.GetUser');",
                  "err": {},
                  "uuid": "f9d6a626-1e5f-4111-9bad-b3e6bf9ad9e4",
                  "parentUUID": "1f14a534-4b35-48f8-944d-c403e07c17ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "clean up",
                  "fullTitle": "E2E E2E - Using Spec Handlers clean up",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.cleanup();",
                  "err": {},
                  "uuid": "48863619-ec1b-49f5-85a3-21928f42c9e7",
                  "parentUUID": "1f14a534-4b35-48f8-944d-c403e07c17ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff55b8a7-e8a9-418e-b07b-34764cde4d2b",
                "f9d6a626-1e5f-4111-9bad-b3e6bf9ad9e4",
                "48863619-ec1b-49f5-85a3-21928f42c9e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "547573b4-19c3-44b7-8fc0-be13f52baa68",
              "title": "E2E - Multiple Specs in a single Step",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - Multiple Specs in a single Step\"",
                  "fullTitle": "E2E E2E - Multiple Specs in a single Step \"before all\" hook in \"E2E - Multiple Specs in a single Step\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User Multiple Specs');",
                  "err": {},
                  "uuid": "774bf488-6d9f-4033-919d-7b53efe966ab",
                  "parentUUID": "547573b4-19c3-44b7-8fc0-be13f52baa68",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save & get & delete user",
                  "fullTitle": "E2E E2E - Multiple Specs in a single Step save & get & delete user",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const step = this.e2e.step('User Workflow');\nawait step.spec('User.AddUser');\nawait step.spec('User.GetUser');\nawait step.spec('User.DeleteUser');",
                  "err": {},
                  "uuid": "ab2112ec-9534-4837-bfb8-3e4edeb9cd27",
                  "parentUUID": "547573b4-19c3-44b7-8fc0-be13f52baa68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab2112ec-9534-4837-bfb8-3e4edeb9cd27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2607a387-3ba9-4d55-a55c-3a8e8f7ed130",
              "title": "E2E - Multiple Specs in a single Step & a clean",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - Multiple Specs in a single Step & a clean\"",
                  "fullTitle": "E2E E2E - Multiple Specs in a single Step & a clean \"before all\" hook in \"E2E - Multiple Specs in a single Step & a clean\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User Single Step & Clean');",
                  "err": {},
                  "uuid": "f05927e1-b429-424a-8749-7d22a1be346f",
                  "parentUUID": "2607a387-3ba9-4d55-a55c-3a8e8f7ed130",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save & get & delete user",
                  "fullTitle": "E2E E2E - Multiple Specs in a single Step & a clean save & get & delete user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const step = this.e2e.step('User Workflow');\nawait step.spec('User.AddUser');\nawait step.spec('User.GetUser');\nawait step.clean('User.DeleteUser');",
                  "err": {},
                  "uuid": "b92667a1-b038-484c-be49-f6fe7d1ef3f8",
                  "parentUUID": "2607a387-3ba9-4d55-a55c-3a8e8f7ed130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cleanup",
                  "fullTitle": "E2E E2E - Multiple Specs in a single Step & a clean cleanup",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.cleanup();",
                  "err": {},
                  "uuid": "5318f2f7-9206-488f-9540-220a06ddc172",
                  "parentUUID": "2607a387-3ba9-4d55-a55c-3a8e8f7ed130",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b92667a1-b038-484c-be49-f6fe7d1ef3f8",
                "5318f2f7-9206-488f-9540-220a06ddc172"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f91bb09a-7268-4216-85a6-3bdc572d4887",
              "title": "E2E - One step fails in a step",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/e2e.spec.js",
              "file": "/test/component/e2e.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"E2E - One step fails in a step\"",
                  "fullTitle": "E2E E2E - One step fails in a step \"before all\" hook in \"E2E - One step fails in a step\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.e2e = pactum.e2e('Add User One Step Fails');",
                  "err": {},
                  "uuid": "8a134630-23e6-4ac5-b3d9-3ce3e0272c8c",
                  "parentUUID": "f91bb09a-7268-4216-85a6-3bdc572d4887",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "save & get & delete user",
                  "fullTitle": "E2E E2E - One step fails in a step save & get & delete user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let err;\ntry {\n  const step = this.e2e.step('User Workflow');\n  await step.spec('User.AddUser');\n  await step.spec('User.GetUser').expectStatus(400);\n  await step.spec('User.DeleteUser');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
                  "err": {},
                  "uuid": "0268275b-ac72-4634-801f-79949d1b7e92",
                  "parentUUID": "f91bb09a-7268-4216-85a6-3bdc572d4887",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should skip this `e2e.step`",
                  "fullTitle": "E2E E2E - One step fails in a step should skip this `e2e.step`",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const step = this.e2e.step('User Workflow');\nawait step.spec('User.AddUser');\nawait step.spec('User.GetUser').expectStatus(400);\nstep.clean('User.DeleteUser');",
                  "err": {},
                  "uuid": "a91760bb-518a-4e17-91ee-caacb22aa084",
                  "parentUUID": "f91bb09a-7268-4216-85a6-3bdc572d4887",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cleanup",
                  "fullTitle": "E2E E2E - One step fails in a step cleanup",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.e2e.cleanup();",
                  "err": {},
                  "uuid": "0a527df7-a0d5-4cad-baf9-c2e3ee9ff329",
                  "parentUUID": "f91bb09a-7268-4216-85a6-3bdc572d4887",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0268275b-ac72-4634-801f-79949d1b7e92",
                "a91760bb-518a-4e17-91ee-caacb22aa084",
                "0a527df7-a0d5-4cad-baf9-c2e3ee9ff329"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f96f18ca-2eca-4861-9d44-14e06ace1992",
          "title": "Expects",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/expects.spec.js",
          "file": "/test/component/expects.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Expects\"",
              "fullTitle": "Expects \"before all\" hook in \"Expects\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const isUser = function (ctx) {\n  const user = ctx.res.json;\n  expect(user).deep.equals({ id: 1 });\n};\npactum.handler.addExpectHandler('isUser', isUser);\nconst hasAddress = function ({ res, data }) {\n  const address = res.json;\n  expect(address.type).equals(data);\n};\npactum.handler.addExpectHandler('hasAddress', hasAddress);",
              "err": {},
              "uuid": "889bc2e1-c17c-43b7-aef0-d0fa7630f67e",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "custom expect handler",
              "fullTitle": "Expects custom expect handler",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n      .useInteraction({\n        request: {\n          method: 'GET',\n          path: '/api/users/1'\n        },\n        response: {\n          status: 200,\n          body: {\n            id: 1\n          }\n        }\n      })\n      .get('http://localhost:9393/api/users/1')\n      .expect('isUser')\n      .expectStatus(200);",
              "err": {},
              "uuid": "4d700fec-52f4-4fbb-bb79-72e1d95c91d2",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ad hoc expect handler",
              "fullTitle": "Expects ad hoc expect handler",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users/1')\n  .expect(({ res }) => {\n    expect(res.json).deep.equals({ id: 1 });\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "98e76a0b-b647-4050-8317-90c5a64590ae",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unknown custom expect handler",
              "fullTitle": "Expects unknown custom expect handler",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expect('isAddress')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Expect Handler Not Found - 'isAddress'`);",
              "err": {},
              "uuid": "d21006d7-bb9e-412a-877a-37afa99cb7ec",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed custom expect handler with data",
              "fullTitle": "Expects failed custom expect handler with data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/address/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          type: 'WORK'\n        }\n      }\n    })\n    .get('http://localhost:9393/api/address/1')\n    .expect('hasAddress', 'HOME')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`expected 'WORK' to equal 'HOME'`);",
              "err": {},
              "uuid": "16f795bf-658c-430c-afab-843c845f93cc",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed ad hoc expect handler",
              "fullTitle": "Expects failed ad hoc expect handler",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          id: 1\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users/1')\n    .expect((res) => { expect(res.json).deep.equals({ id: 2 }); })\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "821c667e-dacb-43b7-a70c-0bd49fc2ba8c",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed status code",
              "fullTitle": "Expects failed status code",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals('HTTP status 404 !== 200');",
              "err": {},
              "uuid": "558cee59-d272-498b-a5bf-46e00cf03485",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header key not found",
              "fullTitle": "Expects header key not found",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeader('x-header', 'value')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header 'x-header' not present in HTTP response`);",
              "err": {},
              "uuid": "2d929ed0-2c94-4ad5-9446-f217554a2385",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header value not found",
              "fullTitle": "Expects header value not found",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeader('connection', 'value')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header value 'value' did not match for header 'connection': 'close'`);",
              "err": {},
              "uuid": "be3f3aee-aca9-49b2-85da-329cb8efb2f2",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header value not found - RegEx",
              "fullTitle": "Expects header value not found - RegEx",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeader('connection', /value/)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header regex (/value/) did not match for header 'connection': 'close'`);",
              "err": {},
              "uuid": "111d80e2-e26f-4f49-8612-25cc4c4c608b",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header contains key not found",
              "fullTitle": "Expects header contains key not found",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeaderContains('x-header', 'value')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header 'x-header' not present in HTTP response`);",
              "err": {},
              "uuid": "63c5a33c-1196-4035-8c2e-f612a8f61a47",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header contains value not found",
              "fullTitle": "Expects header contains value not found",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeaderContains('connection', 'value')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header value 'value' did not match for header 'connection': 'close'`);",
              "err": {},
              "uuid": "b19d8a18-323b-4a2d-abea-bc8ee6e9f0e4",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "header contains value not found - RegEx",
              "fullTitle": "Expects header contains value not found - RegEx",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectHeaderContains('connection', /value/)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header regex (/value/) did not match for header 'connection': 'close'`);",
              "err": {},
              "uuid": "a71d187e-23a9-4f90-93fc-7eae87329da5",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed body",
              "fullTitle": "Expects failed body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectBody('Hello World')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction Not Found');",
              "err": {},
              "uuid": "25576eaa-eadb-4d22-98a2-2d41f9897c23",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed body contains - string",
              "fullTitle": "Expects failed body contains - string",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectBodyContains('Hello World')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Value 'Hello World' not found in response body`);",
              "err": {},
              "uuid": "c6929b99-1f0e-483b-86d7-29c87e4f8e83",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed body contains - object",
              "fullTitle": "Expects failed body contains - object",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectBodyContains({ msg: 'Hello World' })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Value '{\"msg\":\"Hello World\"}' not found in response body`);",
              "err": {},
              "uuid": "9a79c149-efaa-4a25-8317-c3eef1b1623e",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed body contains - RegEx",
              "fullTitle": "Expects failed body contains - RegEx",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectBodyContains(/Hello World/)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Value '/Hello World/' not found in response body`);",
              "err": {},
              "uuid": "cbe292ce-af42-460f-b2f7-380dee67691a",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed json like",
              "fullTitle": "Expects failed json like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectJsonLike({ id: 1 })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Json doesn't have type 'object' at '$' but found 'string'`);",
              "err": {},
              "uuid": "3a6466dd-2b56-42e6-a4a9-97d72ba2192f",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed json schema",
              "fullTitle": "Expects failed json schema",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          id: 1\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users/1')\n    .expectJsonSchema({\n      \"required\": [\"userId\", \"id\"]\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "15ffd32a-5680-4490-8144-8321d2de7b50",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed json schema at",
              "fullTitle": "Expects failed json schema at",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          id: 1\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users/1')\n    .expectJsonSchema('id', {\n      \"type\": \"string\"\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "925c5885-3218-4036-92f9-1973958b8433",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed json match",
              "fullTitle": "Expects failed json match",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectJsonMatch(like({ id: 1 }))\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Json doesn't have type 'object' at '$' but found 'string'`);",
              "err": {},
              "uuid": "5a857701-8ac6-4164-9cf0-6336d931c0e8",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "network error",
              "fullTitle": "Expects network error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9394/api/users/1')\n    .expectJsonSchema({\n      \"required\": [\"userId\", \"id\"]\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "7ee4c417-278d-4389-8ee2-851baadc61c1",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "interaction not exercised error",
              "fullTitle": "Expects interaction not exercised error",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api'\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction not exercised');",
              "err": {},
              "uuid": "0dc623fc-2448-4afc-a27a-53833605c90d",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "interaction not exercised error - with headers, body & matching",
              "fullTitle": "Expects interaction not exercised error - with headers, body & matching",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'POST',\n        path: '/api',\n        headers: {\n          token: ''\n        },\n        body: {\n          id: like(1)\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction not exercised');",
              "err": {},
              "uuid": "78c6bac7-35ce-4ea9-988d-637459ef2fae",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "interaction exercised error",
              "fullTitle": "Expects interaction exercised error",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api'\n      },\n      response: {\n        status: 200\n      },\n      expects: {\n        exercised: false\n      }\n    })\n    .get('http://localhost:9393/api')\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction exercised');",
              "err": {},
              "uuid": "a7436dbe-a2b1-4a13-9ea3-33d700edc6b4",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "interaction call count error",
              "fullTitle": "Expects interaction call count error",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api'\n      },\n      response: {\n        status: 200\n      },\n      expects: {\n        callCount: 2\n      }\n    })\n    .get('http://localhost:9393/api')\n    .expectStatus(200)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction call count 1 !== 2');",
              "err": {},
              "uuid": "f7d9a808-d452-422b-952f-fc2fad0543a5",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json query - on root object",
              "fullTitle": "Expects json query - on root object",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        people: [\n          { name: 'Matt', country: 'NZ' },\n          { name: 'Pete', country: 'AU' },\n          { name: 'Mike', country: 'NZ' }\n        ]\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .expectJson('people[country=NZ].name', 'Matt')\n  .expectJson('people[*].name', ['Matt', 'Pete', 'Mike']);",
              "err": {},
              "uuid": "58536261-6d6d-40bf-a482-dcd1784d2634",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json query - on root array",
              "fullTitle": "Expects json query - on root array",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: [\n        { name: 'Matt', country: 'NZ' },\n        { name: 'Pete', country: 'AU' },\n        { name: 'Mike', country: 'NZ' }\n      ]\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .expectJson('[1].country', 'AU')\n  .expectJson('[country=NZ].name', 'Matt')\n  .expectJson('[*].name', ['Matt', 'Pete', 'Mike']);",
              "err": {},
              "uuid": "1cc89478-3bf2-4f6f-8821-b3511144bec2",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json query - on root object - fails",
              "fullTitle": "Expects json query - on root object - fails",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users'\n      },\n      response: {\n        status: 200,\n        body: {\n          people: [\n            { name: 'Matt', country: 'NZ' },\n            { name: 'Pete', country: 'AU' },\n            { name: 'Mike', country: 'NZ' }\n          ]\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users')\n    .expectStatus(200)\n    .expectJson('people[country=NZ].name', 'Matt')\n    .expectJson('people[*].name', ['Matt', 'Pete'])\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "311c6304-5290-41f0-b42c-9e5aedd61a5d",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json query like - on root object",
              "fullTitle": "Expects json query like - on root object",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        people: [\n          { name: 'Matt', country: 'NZ' },\n          { name: 'Pete', country: 'AU' },\n          { name: 'Mike', country: 'NZ' }\n        ]\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .expectJsonLike('people[*].name', ['Matt', 'Pete']);",
              "err": {},
              "uuid": "901fe7cf-6462-4520-a40f-0681e17a309b",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json query like - fails",
              "fullTitle": "Expects json query like - fails",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users'\n      },\n      response: {\n        status: 200,\n        body: {\n          people: [\n            { name: 'Matt', country: 'NZ' },\n            { name: 'Pete', country: 'AU' },\n            { name: 'Mike', country: 'NZ' }\n          ]\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users')\n    .expectStatus(200)\n    .expectJsonLike('people[*].name', ['Matt', 'Pet'])\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "1d4a6e24-053c-413b-ad86-baff79eb799e",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed response time",
              "fullTitle": "Expects failed response time",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectResponseTime(-1)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains(`Request took longer than -1ms`);",
              "err": {},
              "uuid": "a8cbff61-29d1-443e-9253-f801fa00ca98",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json match at",
              "fullTitle": "Expects json match at",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        people: [\n          { name: 'Matt', country: 'NZ' },\n          { name: 'Pete', country: 'AU' },\n          { name: 'Mike', country: 'NZ' }\n        ]\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .expectJsonMatch('people[*].name', eachLike('Matt'));",
              "err": {},
              "uuid": "eed29aa4-3f56-4d34-af0f-dcd59748fbbd",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json match at - fails",
              "fullTitle": "Expects json match at - fails",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users'\n      },\n      response: {\n        status: 200,\n        body: {\n          people: [\n            { name: 'Matt', country: 'NZ' },\n            { name: 'Pete', country: 'AU' },\n            { name: 'Mike', country: 'NZ' }\n          ]\n        }\n      }\n    })\n    .get('http://localhost:9393/api/users')\n    .expectStatus(200)\n    .expectJsonMatch('people[*].name', eachLike(12))\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "15906415-3047-4ede-a358-abc54023beaa",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json strict match at",
              "fullTitle": "Expects json strict match at",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get people')\n  .get('http://localhost:9393/api/people')\n  .expectStatus(200)\n  .expectJsonMatchStrict('people[*].name', eachLike('Matt'));",
              "err": {},
              "uuid": "22529b3f-0263-4031-b125-e2e164ecf9d6",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json match strict at - fails",
              "fullTitle": "Expects json match strict at - fails",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('get people')\n    .get('http://localhost:9393/api/people')\n    .expectStatus(200)\n    .expectJsonMatchStrict('people[*].name', eachLike(12))\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "922495a9-6383-4291-b914-6c644b7470be",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json strict match",
              "fullTitle": "Expects json strict match",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get people')\n  .get('http://localhost:9393/api/people')\n  .expectStatus(200)\n  .expectJsonMatchStrict({\n    people: [\n      { name: 'Matt', country: 'NZ' },\n      { name: 'Pete', country: 'AU' },\n      { name: 'Mike', country: 'NZ' }\n    ]\n  });",
              "err": {},
              "uuid": "926312a8-befe-47ea-96e4-a4a0be3bb23d",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json match strict - fails",
              "fullTitle": "Expects json match strict - fails",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('get people')\n    .get('http://localhost:9393/api/people')\n    .expectStatus(200)\n    .expectJsonMatchStrict({})\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "5a94e04e-6940-484a-ae44-b7e30b32f648",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - deep equal",
              "fullTitle": "Expects json snapshot - deep equal",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get people')\n  .name('json snapshot - deep equal')\n  .get('http://localhost:9393/api/people')\n  .expectStatus(200)\n  .expectJsonSnapshot();\nawait pactum.spec()\n  .useInteraction('get people')\n  .name('json snapshot - deep equal')\n  .get('http://localhost:9393/api/people')\n  .expectStatus(200)\n  .expectJsonSnapshot();\nfs.unlinkSync(`.pactum/snapshots/json snapshot - deep equal.json`);",
              "err": {},
              "uuid": "ff8bbf7a-d452-4e6c-a847-a84ad1ac3947",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - deep equal - fails",
              "fullTitle": "Expects json snapshot - deep equal - fails",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow'\n      }\n    }\n  })\n  .name('json snapshot - deep equal')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot();\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          id: 'random-ids',\n          name: 'snow'\n        }\n      }\n    })\n    .name('json snapshot - deep equal')\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonSnapshot()\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nfs.unlinkSync(`.pactum/snapshots/json snapshot - deep equal.json`);\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "12f8d8ee-7ae5-460e-b085-c18e7979c339",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with matchers",
              "fullTitle": "Expects json snapshot - with matchers",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get user with id 1')\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like(1)\n  });\nawait pactum.spec()\n  .useInteraction('get user with id 1')\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like(1)\n  });\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with matchers.json`);",
              "err": {},
              "uuid": "da8f5035-ada0-4256-8dd0-9e8822b640f3",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with multiple matchers",
              "fullTitle": "Expects json snapshot - with multiple matchers",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow',\n        age: 12,\n        createdAt: '2020-10-10'\n      }\n    }\n  })\n  .name('json snapshot - with multiple matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like('id')\n  })\n  .expectJsonSnapshot({\n    createdAt: like('2020-02-02')\n  });\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow',\n        age: 12,\n        createdAt: '2020-10-10'\n      }\n    }\n  })\n  .name('json snapshot - with multiple matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like('id'),\n    createdAt: like('2020-02-02')\n  });\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with multiple matchers.json`);",
              "err": {},
              "uuid": "b6251db6-4372-46fc-8dd1-9fa1aa6cea4d",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with matchers - fails with extra property",
              "fullTitle": "Expects json snapshot - with matchers - fails with extra property",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow'\n      }\n    }\n  })\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like('id')\n  });\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/users/1'\n      },\n      response: {\n        status: 200,\n        body: {\n          id: 'random-id',\n          name: 'snow',\n          age: 2\n        }\n      }\n    })\n    .name('json snapshot - with matchers')\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonSnapshot({\n      id: like('id')\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with matchers.json`);\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "2af96489-6cce-42e6-8498-35f36dbd0518",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with matchers - fails with matcher",
              "fullTitle": "Expects json snapshot - with matchers - fails with matcher",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow'\n      }\n    }\n  })\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like('id')\n  });\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction('get user with id 1')\n    .name('json snapshot - with matchers')\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonSnapshot({\n      id: like('id')\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with matchers.json`);\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "3de78b23-6bd4-4436-974a-61e4815c9580",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with matchers - fails with matcher - update snapshot",
              "fullTitle": "Expects json snapshot - with matchers - fails with matcher - update snapshot",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err1, err2;\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 'random-id',\n        name: 'snow'\n      }\n    }\n  })\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like('id')\n  });\ntry {\n  await pactum.spec()\n    .useInteraction('get user with id 1')\n    .name('json snapshot - with matchers')\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonSnapshot({\n      id: like('id')\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err1 = error;\n}\ntry {\n  await pactum.spec()\n    .useInteraction('get user with id 1')\n    .name('json snapshot - with matchers')\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonSnapshot({\n      id: like(1)\n    })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err2 = error;\n}\nawait pactum.spec()\n  .useInteraction('get user with id 1')\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like(1)\n  })\n  .updateSnapshot();\nawait pactum.spec()\n  .useInteraction('get user with id 1')\n  .name('json snapshot - with matchers')\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonSnapshot({\n    id: like(1)\n  });\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with matchers.json`);\nexpect(err1).not.undefined;\nexpect(err2).not.undefined;",
              "err": {},
              "uuid": "b4ac8b3e-afd1-4430-8457-add2781cbd53",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json snapshot - with invalid matchers",
              "fullTitle": "Expects json snapshot - with invalid matchers",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let e;\ntry {\n  await pactum.spec()\n  .useInteraction('get people')\n  .name('json snapshot - with invalid matchers')\n  .get('http://localhost:9393/api/people')\n  .expectStatus(200)\n  .useLogLevel('ERROR')\n  .expectJsonSnapshot({\n    id: like('id')\n  })\n  .expectJsonSnapshot({\n    createdAt: like('2020-02-02')\n  });\n} catch (error) {\n  e = error;\n}\nexpect(e).not.undefined;\nfs.unlinkSync(`.pactum/snapshots/json snapshot - with invalid matchers.json`);",
              "err": {},
              "uuid": "e338442f-5b1b-4ff7-b8eb-058bb17ddd0e",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - empty",
              "fullTitle": "Expects error - empty",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9392')\n  .expectError();",
              "err": {},
              "uuid": "809111d3-a076-4ae0-83ba-44ace86eb6d0",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - with string",
              "fullTitle": "Expects error - with string",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9392')\n  .expectError('ECONNREFUSED');",
              "err": {},
              "uuid": "6171f91d-fd53-4d18-9ae8-7fab48552e7a",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - with object",
              "fullTitle": "Expects error - with object",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9392')\n  .expectError({ code: 'ECONNREFUSED' });",
              "err": {},
              "uuid": "efbe3f58-3f2b-40a8-950e-a072f7f84240",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - empty - fails",
              "fullTitle": "Expects error - empty - fails",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('default get')\n    .get('http://localhost:9393/default/get')\n    .expectError()\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "ac548b4e-45b0-478e-b753-41897bac5f9b",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - with string - fails",
              "fullTitle": "Expects error - with string - fails",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9392')\n    .expectError('ECONNRESET')\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "f2cfe9bc-154b-4cb3-a584-a2a3013ee2d2",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "error - with object - fails",
              "fullTitle": "Expects error - with object - fails",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9392')\n    .expectError({ code: 'ECONNRESET' })\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "cf7947c4-48b6-4eca-9865-e709482a59e9",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json schema with options",
              "fullTitle": "Expects json schema with options",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectJsonSchema({\n    type: 'object',\n    properties: {\n      method: {\n        type: 'string',\n        format: 'only-get'\n      }\n    }\n  }, {\n    formats: {\n      'only-get': /^GET$/\n    }\n  });",
              "err": {},
              "uuid": "1a3a57c9-4744-453d-9b7a-697b8f161e66",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json schema at with options",
              "fullTitle": "Expects json schema at with options",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectJsonSchema('method', {\n    type: 'string',\n    format: 'only-get'\n  }, {\n    formats: {\n      'only-get': /^GET$/\n    }\n  });",
              "err": {},
              "uuid": "a7d33675-468c-41d2-bcba-2b4117109356",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length",
              "fullTitle": "Expects json length",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default users')\n  .get('http://localhost:9393/default/users')\n  .expectJsonLength(3);",
              "err": {},
              "uuid": "e0be6f46-87a8-4f8a-b14a-ff1dac3165eb",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length - fail",
              "fullTitle": "Expects json length - fail",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('default users')\n    .get('http://localhost:9393/default/users')\n    .expectJsonLength(2)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "ff0d7ff4-37d5-4d41-a094-2ae59d6a4fb8",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length - fail - invalid",
              "fullTitle": "Expects json length - fail - invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('default get')\n    .get('http://localhost:9393/default/get')\n    .expectJsonLength(2)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "d774caa9-a8c7-4b84-b717-79688e9e96c3",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length query",
              "fullTitle": "Expects json length query",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get people')\n  .get('http://localhost:9393/api/people')\n  .expectJsonLength('people', 3);",
              "err": {},
              "uuid": "e8e84c30-da17-4c29-a490-887b8b204a85",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length - fail",
              "fullTitle": "Expects json length - fail",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('get people')\n    .get('http://localhost:9393/api/people')\n    .expectJsonLength('people', 2)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "5964c714-6536-42fb-a715-9de31811eb4b",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "json length - fail - invalid",
              "fullTitle": "Expects json length - fail - invalid",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('get people')\n    .get('http://localhost:9393/api/people')\n    .expectJsonLength('people[0]', 2)\n    .useLogLevel('ERROR');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "bc78509a-a634-4b4d-8d37-fb643ec874cc",
              "parentUUID": "f96f18ca-2eca-4861-9d44-14e06ace1992",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d700fec-52f4-4fbb-bb79-72e1d95c91d2",
            "98e76a0b-b647-4050-8317-90c5a64590ae",
            "d21006d7-bb9e-412a-877a-37afa99cb7ec",
            "16f795bf-658c-430c-afab-843c845f93cc",
            "821c667e-dacb-43b7-a70c-0bd49fc2ba8c",
            "558cee59-d272-498b-a5bf-46e00cf03485",
            "2d929ed0-2c94-4ad5-9446-f217554a2385",
            "be3f3aee-aca9-49b2-85da-329cb8efb2f2",
            "111d80e2-e26f-4f49-8612-25cc4c4c608b",
            "63c5a33c-1196-4035-8c2e-f612a8f61a47",
            "b19d8a18-323b-4a2d-abea-bc8ee6e9f0e4",
            "a71d187e-23a9-4f90-93fc-7eae87329da5",
            "25576eaa-eadb-4d22-98a2-2d41f9897c23",
            "c6929b99-1f0e-483b-86d7-29c87e4f8e83",
            "9a79c149-efaa-4a25-8317-c3eef1b1623e",
            "cbe292ce-af42-460f-b2f7-380dee67691a",
            "3a6466dd-2b56-42e6-a4a9-97d72ba2192f",
            "15ffd32a-5680-4490-8144-8321d2de7b50",
            "925c5885-3218-4036-92f9-1973958b8433",
            "5a857701-8ac6-4164-9cf0-6336d931c0e8",
            "7ee4c417-278d-4389-8ee2-851baadc61c1",
            "0dc623fc-2448-4afc-a27a-53833605c90d",
            "78c6bac7-35ce-4ea9-988d-637459ef2fae",
            "a7436dbe-a2b1-4a13-9ea3-33d700edc6b4",
            "f7d9a808-d452-422b-952f-fc2fad0543a5",
            "58536261-6d6d-40bf-a482-dcd1784d2634",
            "1cc89478-3bf2-4f6f-8821-b3511144bec2",
            "311c6304-5290-41f0-b42c-9e5aedd61a5d",
            "901fe7cf-6462-4520-a40f-0681e17a309b",
            "1d4a6e24-053c-413b-ad86-baff79eb799e",
            "a8cbff61-29d1-443e-9253-f801fa00ca98",
            "eed29aa4-3f56-4d34-af0f-dcd59748fbbd",
            "15906415-3047-4ede-a358-abc54023beaa",
            "22529b3f-0263-4031-b125-e2e164ecf9d6",
            "922495a9-6383-4291-b914-6c644b7470be",
            "926312a8-befe-47ea-96e4-a4a0be3bb23d",
            "5a94e04e-6940-484a-ae44-b7e30b32f648",
            "ff8bbf7a-d452-4e6c-a847-a84ad1ac3947",
            "12f8d8ee-7ae5-460e-b085-c18e7979c339",
            "da8f5035-ada0-4256-8dd0-9e8822b640f3",
            "b6251db6-4372-46fc-8dd1-9fa1aa6cea4d",
            "2af96489-6cce-42e6-8498-35f36dbd0518",
            "3de78b23-6bd4-4436-974a-61e4815c9580",
            "b4ac8b3e-afd1-4430-8457-add2781cbd53",
            "e338442f-5b1b-4ff7-b8eb-058bb17ddd0e",
            "809111d3-a076-4ae0-83ba-44ace86eb6d0",
            "6171f91d-fd53-4d18-9ae8-7fab48552e7a",
            "efbe3f58-3f2b-40a8-950e-a072f7f84240",
            "ac548b4e-45b0-478e-b753-41897bac5f9b",
            "f2cfe9bc-154b-4cb3-a584-a2a3013ee2d2",
            "cf7947c4-48b6-4eca-9865-e709482a59e9",
            "1a3a57c9-4744-453d-9b7a-697b8f161e66",
            "a7d33675-468c-41d2-bcba-2b4117109356",
            "e0be6f46-87a8-4f8a-b14a-ff1dac3165eb",
            "ff0d7ff4-37d5-4d41-a094-2ae59d6a4fb8",
            "d774caa9-a8c7-4b84-b717-79688e9e96c3",
            "e8e84c30-da17-4c29-a490-887b8b204a85",
            "5964c714-6536-42fb-a715-9de31811eb4b",
            "bc78509a-a634-4b4d-8d37-fb643ec874cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 288,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
          "title": "Files",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/files.spec.js",
          "file": "/test/component/files.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Files\"",
              "fullTitle": "Files \"before all\" hook in \"Files\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addInteractionHandler('post file', () => {\n  return {\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/file'\n    },\n    response: {\n      status: 200\n    }\n  }\n});",
              "err": {},
              "uuid": "6a23436d-0816-4166-b39e-d712586469b7",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "withBody",
              "fullTitle": "Files withBody",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withBody({ file: './package.json' })",
              "err": {},
              "uuid": "04ca19ce-0b79-44e4-a998-7b44871af31b",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with file - just path",
              "fullTitle": "Files with file - just path",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withFile('./package.json')\n  .expectStatus(200);",
              "err": {},
              "uuid": "b364660c-5eae-4c10-81ea-1d9b7b1917af",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with file - path & options",
              "fullTitle": "Files with file - path & options",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withFile('./package.json', { contentType: 'application/json' })\n  .expectStatus(200);",
              "err": {},
              "uuid": "06dc492f-a261-48fb-a856-211346832a46",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with file - key & path",
              "fullTitle": "Files with file - key & path",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withFile('file-2', './package.json')\n  .expectStatus(200);",
              "err": {},
              "uuid": "ca79012b-2962-46df-8a3f-7da2165cb2b7",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with file - key, path & options",
              "fullTitle": "Files with file - key, path & options",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withFile('file-2', './package.json', { contentType: 'application/json' })\n  .expectStatus(200);",
              "err": {},
              "uuid": "5b82b54e-682f-4741-8585-ad2aef57bee3",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with file - custom content-type header",
              "fullTitle": "Files with file - custom content-type header",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('post file')\n  .post('http://localhost:9393/api/file')\n  .withFile('./package.json')\n  .withHeaders('content-type', 'any')\n  .expectStatus(200);",
              "err": {},
              "uuid": "2731dbf8-0721-4f41-92bb-b55dbce3e768",
              "parentUUID": "4a32de00-0cb1-4cc3-b207-eeca12035f7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04ca19ce-0b79-44e4-a998-7b44871af31b",
            "b364660c-5eae-4c10-81ea-1d9b7b1917af",
            "06dc492f-a261-48fb-a856-211346832a46",
            "ca79012b-2962-46df-8a3f-7da2165cb2b7",
            "5b82b54e-682f-4741-8585-ad2aef57bee3",
            "2731dbf8-0721-4f41-92bb-b55dbce3e768"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "62c87cc9-5ef6-4e7c-841f-dc73ba16a604",
          "title": "Flow",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/flow.spec.js",
          "file": "/test/component/flow.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - without query",
              "fullTitle": "Flow GET - without query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.flow('first flow')\n  .useInteraction('default flow get')\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "5443a078-9ec1-4d0b-b066-866fd4daa5e6",
              "parentUUID": "62c87cc9-5ef6-4e7c-841f-dc73ba16a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "no flow name",
              "fullTitle": "Flow no flow name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.flow()\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "3193af76-0fb9-43d5-9ba2-8f3ee1d7b70f",
              "parentUUID": "62c87cc9-5ef6-4e7c-841f-dc73ba16a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty flow name",
              "fullTitle": "Flow empty flow name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.flow('')\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "f276ac5a-15d8-4e61-88ba-bafb5af85673",
              "parentUUID": "62c87cc9-5ef6-4e7c-841f-dc73ba16a604",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5443a078-9ec1-4d0b-b066-866fd4daa5e6",
            "3193af76-0fb9-43d5-9ba2-8f3ee1d7b70f",
            "f276ac5a-15d8-4e61-88ba-bafb5af85673"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "52eb6548-0bd7-4c32-9555-8a9174742b04",
          "title": "Form",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/form.spec.js",
          "file": "/test/component/form.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "single pair of form data",
              "fullTitle": "Form single pair of form data",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      },\n      form: {\n        'user': 'drake'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withForm({ 'user': 'drake' })\n  .expectStatus(200);",
              "err": {},
              "uuid": "cf6dc507-21e5-4b1d-862c-6d2f29bf88ff",
              "parentUUID": "52eb6548-0bd7-4c32-9555-8a9174742b04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple pairs of form data",
              "fullTitle": "Form multiple pairs of form data",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      },\n      form: {\n        'user': 'drake',\n        'age': '10'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withForm({ 'user': 'drake', 'age': 10 })\n  .expectStatus(200);",
              "err": {},
              "uuid": "68600abe-e1c9-4d8c-8900-1ca5354f7ca5",
              "parentUUID": "52eb6548-0bd7-4c32-9555-8a9174742b04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "using matchers",
              "fullTitle": "Form using matchers",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      },\n      form: {\n        'user': like('drake')\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withForm({ 'user': 'brake' })\n  .expectStatus(200);",
              "err": {},
              "uuid": "3f49f159-7f5d-48fe-8079-e565692fc36b",
              "parentUUID": "52eb6548-0bd7-4c32-9555-8a9174742b04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fails to match",
              "fullTitle": "Form fails to match",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await spec()\n    .useInteraction({\n      request: {\n        method: 'POST',\n        path: '/api/projects',\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        form: {\n          'user': 'drake'\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .post('http://localhost:9393/api/projects')\n    .withForm({ 'user': 'drake', 'age': 10 })\n    .useLogLevel('SILENT')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "6d0c6759-870e-4f3b-a699-fec81b994a85",
              "parentUUID": "52eb6548-0bd7-4c32-9555-8a9174742b04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "disabling strict",
              "fullTitle": "Form disabling strict",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      },\n      form: {\n        'user': 'drake'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withForm({ 'user': 'drake', 'age': 10 })\n  .expectStatus(200);",
              "err": {},
              "uuid": "5de9ebab-75b3-4db1-8228-c6fc78d6e0eb",
              "parentUUID": "52eb6548-0bd7-4c32-9555-8a9174742b04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf6dc507-21e5-4b1d-862c-6d2f29bf88ff",
            "68600abe-e1c9-4d8c-8900-1ca5354f7ca5",
            "3f49f159-7f5d-48fe-8079-e565692fc36b",
            "6d0c6759-870e-4f3b-a699-fec81b994a85",
            "5de9ebab-75b3-4db1-8228-c6fc78d6e0eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
          "title": "Fuzz",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/fuzz.swagger.v2.spec.js",
          "file": "/test/component/fuzz.swagger.v2.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Fuzz\"",
              "fullTitle": "Fuzz \"before all\" hook in \"Fuzz\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.settings.setLogLevel('ERROR');\nmock.addInteraction({\n  request: {\n    method: 'GET',\n    path: '/swagger.json'\n  },\n  response: {\n    status: 200,\n    body: {\n      \"swagger\": \"2.0\",\n      \"basePath\": \"/v2\",\n      \"paths\": {\n        \"/health\": {\n          \"get\": {}\n        },\n        \"/info\": {\n          \"post\": {}\n        },\n        \"/version\": {\n          \"put\": {\n            \"parameters\": [\n              {\n                \"in\": \"body\",\n                \"schema\": {\n                  \"$ref\": \"#/definitions/Version\"\n                }\n              }\n            ]\n          }\n        }\n      },\n      \"definitions\": {\n        \"Version\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"major\": {\n              \"type\": \"string\"\n            },\n            \"minor\": {\n              \"type\": \"string\"\n            },\n            \"patch\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n});\nhandler.addInteractionHandler('root invalid path', (ctx) => {\n  return {\n    strict: false,\n    request: {\n      method: ctx.data,\n      path: '/ROOT/INVALID/PATH'\n    },\n    response: {\n      status: 404\n    }\n  };\n});\nhandler.addInteractionHandler('invalid path', (ctx) => {\n  return {\n    strict: false,\n    request: {\n      method: ctx.data.method,\n      path: ctx.data.path\n    },\n    response: {\n      status: 404\n    }\n  };\n});\nhandler.addInteractionHandler('invalid method', (ctx) => {\n  return {\n    request: {\n      method: ctx.data.method,\n      path: ctx.data.path\n    },\n    response: {\n      status: 405\n    }\n  };\n});\nmock.addInteraction('root invalid path', 'GET');\nmock.addInteraction('root invalid path', 'POST');\nmock.addInteraction('root invalid path', 'DELETE');\nmock.addInteraction('root invalid path', 'PUT');\nmock.addInteraction('root invalid path', 'PATCH');\nmock.addInteraction('invalid path', { method: 'GET', path: '/v2/health/INVALID/PATH' });\nmock.addInteraction('invalid path', { method: 'POST', path: '/v2/info/INVALID/PATH' });\nmock.addInteraction('invalid path', { method: 'PUT', path: '/v2/version/INVALID/PATH' });\nmock.addInteraction('invalid method', { method: 'POST', path: '/v2/health' });\nmock.addInteraction('invalid method', { method: 'PUT', path: '/v2/health' });\nmock.addInteraction('invalid method', { method: 'PATCH', path: '/v2/health' });\nmock.addInteraction('invalid method', { method: 'DELETE', path: '/v2/health' });\nmock.addInteraction('invalid method', { method: 'GET', path: '/v2/info' });\nmock.addInteraction('invalid method', { method: 'PUT', path: '/v2/info' });\nmock.addInteraction('invalid method', { method: 'PATCH', path: '/v2/info' });\nmock.addInteraction('invalid method', { method: 'DELETE', path: '/v2/info' });\nmock.addInteraction('invalid method', { method: 'GET', path: '/v2/version' });\nmock.addInteraction('invalid method', { method: 'POST', path: '/v2/version' });\nmock.addInteraction('invalid method', { method: 'PATCH', path: '/v2/version' });\nmock.addInteraction('invalid method', { method: 'DELETE', path: '/v2/version' });\nmock.addInteraction({\n  strict: false,\n  request: {\n    method: 'PUT',\n    path: '/v2/version'\n  },\n  response: {\n    status: 400\n  }\n});",
              "err": {},
              "uuid": "9243c788-d6e2-4b4a-a0c1-e97a17ffda4d",
              "parentUUID": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Fuzz\"",
              "fullTitle": "Fuzz \"after all\" hook in \"Fuzz\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.settings.setLogLevel('INFO');\npactum.mock.clearInteractions();",
              "err": {},
              "uuid": "8b759b47-d993-4a63-a30b-761cba137aed",
              "parentUUID": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "swagger",
              "fullTitle": "Fuzz swagger",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.fuzz()\n  .onSwagger('http://localhost:9393/swagger.json');",
              "err": {},
              "uuid": "b7320b6c-610b-435f-bd44-1d26483ff930",
              "parentUUID": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "swagger - with batch size & inspect",
              "fullTitle": "Fuzz swagger - with batch size & inspect",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.fuzz()\n  .onSwagger('http://localhost:9393/swagger.json')\n  .withHeaders('x', 'y')\n  .withHeaders({'x': 'z'})\n  .withBatchSize(5)\n  .inspect();",
              "err": {},
              "uuid": "42ca5d8d-f5fd-415b-ba9e-267d417eb18e",
              "parentUUID": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "swagger - fail for success status",
              "fullTitle": "Fuzz swagger - fail for success status",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.fuzz()\n    .useInteraction({\n      request: {\n        method: 'DELETE',\n        path: '/v2/version'\n      },\n      response: {\n        status: 200\n      }\n    })\n    .onSwagger('http://localhost:9393/swagger.json');\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;\nexpect(err.toString()).includes('Fuzz');",
              "err": {},
              "uuid": "88a681e1-6aa7-428b-bf4e-4f1a3d63657e",
              "parentUUID": "122a9dc5-fc80-467e-a83c-0372fd24f2a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7320b6c-610b-435f-bd44-1d26483ff930",
            "42ca5d8d-f5fd-415b-ba9e-267d417eb18e",
            "88a681e1-6aa7-428b-bf4e-4f1a3d63657e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f177c16d-eb5c-4384-be96-083888806a13",
          "title": "GraphQL",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/graphQL.spec.js",
          "file": "/test/component/graphQL.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with single line graphql query",
              "fullTitle": "GraphQL with single line graphql query",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `{ hello }`\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        data: {\n          hello: 'Hello World'\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withGraphQLQuery(`{ hello }`)\n  .expectStatus(200)\n  .expectJson({\n    data: {\n      hello: 'Hello World'\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "a87623ff-6d36-45dd-9013-6500d9585741",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with single line graphql query - not matching",
              "fullTitle": "GraphQL with single line graphql query - not matching",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'POST',\n        path: '/api/graphql',\n        graphQL: {\n          query: `{ hello }`\n        }\n      },\n      response: {\n        status: 200,\n        body: {\n          data: {\n            hello: 'Hello World'\n          }\n        }\n      }\n    })\n    .post('http://localhost:9393/api/graphql')\n    .withGraphQLQuery(`{ world }`)\n    .expectStatus(200)\n    .expectJson({\n      data: {\n        hello: 'Hello World'\n      }\n    });\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "f74018bf-c30f-46c7-b69d-85d117f601a1",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with multi line graphql query",
              "fullTitle": "GraphQL with multi line graphql query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            hero {\n              name\n              age\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        data: {\n          hero: {\n            name: 'R2-D2'\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `\n      {\n        hero {\n          name\n          age\n        }\n      }\n    `\n  })\n  .expectStatus(200)\n  .expectJson({\n    data: {\n      hero: {\n        name: 'R2-D2'\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "a65ce6bb-e40a-4308-8eea-9d7ed044288d",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with nested graphql query",
              "fullTitle": "GraphQL with nested graphql query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            hero {\n              name\n              # Queries can have comments!\n              friends {\n                name\n              }\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"hero\": {\n            \"name\": \"R2-D2\",\n            \"friends\": [\n              {\n                \"name\": \"Luke\"\n              },\n              {\n                \"name\": \"Han Solo\"\n              },\n              {\n                \"name\": \"Organa\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `\n      {\n        hero {\n          name\n          # Queries can have comments!\n          friends {\n            name\n          }\n        }\n      }\n    `\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"hero\": {\n        \"name\": \"R2-D2\",\n        \"friends\": [\n          {\n            \"name\": \"Luke\"\n          },\n          {\n            \"name\": \"Han Solo\"\n          },\n          {\n            \"name\": \"Organa\"\n          }\n        ]\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "97b1c404-35bf-4938-a5f2-b8a3be7f72cc",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with arguments graphql query",
              "fullTitle": "GraphQL with arguments graphql query",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            human(id: \"1000\") {\n              name\n              height\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"human\": {\n            \"name\": \"Luke\",\n            \"height\": 1.72\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `{ human(id: \"1000\") { name, height } }`\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"human\": {\n        \"name\": \"Luke\",\n        \"height\": 1.72\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "ba58a121-5909-40ef-adfa-470f8a101701",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with enum arguments graphql query",
              "fullTitle": "GraphQL with enum arguments graphql query",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            human(id: \"1000\") {\n              name\n              height(unit: FOOT)\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"human\": {\n            \"name\": \"Luke\",\n            \"height\": 5.6430448\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `{\n      human(id: \"1000\") {\n        name\n        height(unit: FOOT)\n      }\n    }`\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"human\": {\n        \"name\": \"Luke\",\n        \"height\": 5.6430448\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "9966c4f6-3a74-4ed3-b7c1-89febddc6d4e",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with alias graphql query",
              "fullTitle": "GraphQL with alias graphql query",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            empireHero: hero(episode: EMPIRE) {\n              name\n            }\n            jediHero: hero(episode: JEDI) {\n              name\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"empireHero\": {\n            \"name\": \"Luke\"\n          },\n          \"jediHero\": {\n            \"name\": \"R2-D2\"\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `\n      {\n        empireHero: hero(episode: EMPIRE) {\n          name\n        }\n        jediHero: hero(episode: JEDI) {\n          name\n        }\n      }\n    `\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"empireHero\": {\n        \"name\": \"Luke\"\n      },\n      \"jediHero\": {\n        \"name\": \"R2-D2\"\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "8f7e00a5-f93c-4c76-aa38-3112d4123bc6",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with fragments graphql query",
              "fullTitle": "GraphQL with fragments graphql query",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          {\n            leftComparison: hero(episode: EMPIRE) {\n              ...comparisonFields\n            }\n            rightComparison: hero(episode: JEDI) {\n              ...comparisonFields\n            }\n          }\n          fragment comparisonFields on Character {\n            name\n            appearsIn\n            friends {\n              name\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"leftComparison\": {\n            \"name\": \"Luke\",\n            \"appearsIn\": [\n              \"EMPIRE\",\n              \"JEDI\"\n            ],\n            \"friends\": [\n              {\n                \"name\": \"Han Solo\"\n              },\n              {\n                \"name\": \"Organa\"\n              },\n              {\n                \"name\": \"C-3PO\"\n              },\n              {\n                \"name\": \"R2-D2\"\n              }\n            ]\n          },\n          \"rightComparison\": {\n            \"name\": \"R2-D2\",\n            \"appearsIn\": [\n              \"EMPIRE\",\n              \"JEDI\"\n            ],\n            \"friends\": [\n              {\n                \"name\": \"Luke\"\n              },\n              {\n                \"name\": \"Han Solo\"\n              },\n              {\n                \"name\": \"Organa\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `\n      {\n        leftComparison: hero(episode: EMPIRE) {\n          ...comparisonFields\n        }\n        rightComparison: hero(episode: JEDI) {\n          ...comparisonFields\n        }\n      }\n      fragment comparisonFields on Character {\n        name\n        appearsIn\n        friends {\n          name\n        }\n      }\n    `\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"leftComparison\": {\n        \"name\": \"Luke\",\n        \"appearsIn\": [\n          \"EMPIRE\",\n          \"JEDI\"\n        ],\n        \"friends\": [\n          {\n            \"name\": \"Han Solo\"\n          },\n          {\n            \"name\": \"Organa\"\n          },\n          {\n            \"name\": \"C-3PO\"\n          },\n          {\n            \"name\": \"R2-D2\"\n          }\n        ]\n      },\n      \"rightComparison\": {\n        \"name\": \"R2-D2\",\n        \"appearsIn\": [\n          \"EMPIRE\",\n          \"JEDI\"\n        ],\n        \"friends\": [\n          {\n            \"name\": \"Luke\"\n          },\n          {\n            \"name\": \"Han Solo\"\n          },\n          {\n            \"name\": \"Organa\"\n          }\n        ]\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "7f0b42ed-9689-4673-9b40-f0bace977ae1",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with operation name graphql query",
              "fullTitle": "GraphQL with operation name graphql query",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          query HeroNameAndFriends {\n            hero {\n              name\n              friends {\n                name\n              }\n            }\n          }\n        `\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        \"data\": {\n          \"hero\": {\n            \"name\": \"R2-D2\",\n            \"friends\": [\n              {\n                \"name\": \"Luke\"\n              },\n              {\n                \"name\": \"Han Solo\"\n              },\n              {\n                \"name\": \"Organa\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withJson({\n    query: `\n      query HeroNameAndFriends {\n        hero {\n          name\n          friends {\n            name\n          }\n        }\n      }\n    `\n  })\n  .expectStatus(200)\n  .expectJson({\n    \"data\": {\n      \"hero\": {\n        \"name\": \"R2-D2\",\n        \"friends\": [\n          {\n            \"name\": \"Luke\"\n          },\n          {\n            \"name\": \"Han Solo\"\n          },\n          {\n            \"name\": \"Organa\"\n          }\n        ]\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "ca9bf8ef-acc2-4f1a-adad-5f84c35c8329",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with variables",
              "fullTitle": "GraphQL with variables",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/graphql',\n      graphQL: {\n        query: `\n          query HeroNameAndFriends($episode: Episode) {\n            hero(episode: $episode) {\n              name\n              friends {\n                name\n              }\n            }\n          }\n        `,\n        variables: {\n          \"episode\": \"JEDI\"\n        }\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        data: {\n          hero: {\n            name: 'R2-D2'\n          }\n        }\n      }\n    }\n  })\n  .post('http://localhost:9393/api/graphql')\n  .withGraphQLQuery(`\n    query HeroNameAndFriends($episode: Episode) {\n      hero(episode: $episode) {\n        name\n        friends {\n          name\n        }\n      }\n    }`\n  )\n  .withGraphQLVariables({\n    \"episode\": \"JEDI\"\n  })\n  .expectStatus(200)\n  .expectJson({\n    data: {\n      hero: {\n        name: 'R2-D2'\n      }\n    }\n  })\n  .toss();",
              "err": {},
              "uuid": "5aef7bbd-b531-4532-ba75-b32acd654100",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET method with query should work",
              "fullTitle": "GraphQL GET method with query should work",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/graphql',\n      graphQL: {\n        query: `{ hello }`\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        data: {\n          hello: 'Hello World'\n        }\n      }\n    }\n  })\n  .get('http://localhost:9393/api/graphql')\n  .withGraphQLQuery(`{ hello }`)\n  .expectStatus(200)\n  .expectJson({\n    data: {\n      hello: 'Hello World'\n    }\n  });",
              "err": {},
              "uuid": "72dba08b-362e-41dd-89cc-1ff0db0c0b03",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET method with query & variables should work",
              "fullTitle": "GraphQL GET method with query & variables should work",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/graphql',\n      graphQL: {\n        query: `{ hello }`,\n        variables: {\n          \"episode\": \"JEDI\"\n        }\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        data: {\n          hello: 'Hello World'\n        }\n      }\n    }\n  })\n  .get('http://localhost:9393/api/graphql')\n  .withGraphQLQuery(`{ hello }`)\n  .withGraphQLVariables({\n    \"episode\": \"JEDI\"\n  })\n  .expectStatus(200)\n  .expectJson({\n    data: {\n      hello: 'Hello World'\n    }\n  });",
              "err": {},
              "uuid": "f57c9b91-d9dc-486e-b7c8-fa3d882bf3ed",
              "parentUUID": "f177c16d-eb5c-4384-be96-083888806a13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a87623ff-6d36-45dd-9013-6500d9585741",
            "f74018bf-c30f-46c7-b69d-85d117f601a1",
            "a65ce6bb-e40a-4308-8eea-9d7ed044288d",
            "97b1c404-35bf-4938-a5f2-b8a3be7f72cc",
            "ba58a121-5909-40ef-adfa-470f8a101701",
            "9966c4f6-3a74-4ed3-b7c1-89febddc6d4e",
            "8f7e00a5-f93c-4c76-aa38-3112d4123bc6",
            "7f0b42ed-9689-4673-9b40-f0bace977ae1",
            "ca9bf8ef-acc2-4f1a-adad-5f84c35c8329",
            "5aef7bbd-b531-4532-ba75-b32acd654100",
            "72dba08b-362e-41dd-89cc-1ff0db0c0b03",
            "f57c9b91-d9dc-486e-b7c8-fa3d882bf3ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "eb602fb8-bf8c-4d78-9e22-b0234438114a",
          "title": "Interactions - Clone",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.clone.spec.js",
          "file": "/test/component/interactions.clone.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should clone the data",
              "fullTitle": "Interactions - Clone should clone the data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction({\n    clone: true,\n    request: {\n      method: 'POST',\n      path: '/api/users',\n      body: user\n    },\n    response: {\n      status: 200,\n      body: user\n    }\n  })\n  .post('http://localhost:9393/api/users')\n  .withJson({\n    name: 'guest'\n  })\n  .expectStatus(200);\nexpect(user).deep.equals({ name: { value: 'guest', pactum_type: 'LIKE' } });",
              "err": {},
              "uuid": "7112c9c6-a28f-4d69-8d38-94c0b8eb259d",
              "parentUUID": "eb602fb8-bf8c-4d78-9e22-b0234438114a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7112c9c6-a28f-4d69-8d38-94c0b8eb259d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d0d63190-3d18-4677-a0e1-eba84fa64e10",
          "title": "Interactions - File",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.file.spec.js",
          "file": "/test/component/interactions.file.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "download file with default headers",
              "fullTitle": "Interactions - File download file with default headers",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/download'\n    },\n    response: {\n      status: 200,\n      file: 'assets/logo.png'\n    }\n  })\n  .get('http://localhost:9393/download')\n  .expectStatus(200)\n  .expectBodyContains('PNG')\n  .expectHeader('content-type', 'image/png');",
              "err": {},
              "uuid": "18c04622-ffd4-4b31-84de-b319a02d7142",
              "parentUUID": "d0d63190-3d18-4677-a0e1-eba84fa64e10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "download file with custom headers",
              "fullTitle": "Interactions - File download file with custom headers",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/download'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      file: 'assets/logo.png'\n    }\n  })\n  .get('http://localhost:9393/download')\n  .expectStatus(200)\n  .expectBodyContains('PNG')\n  .expectHeader('content-type', 'application/json');",
              "err": {},
              "uuid": "ed07b3fe-4c0e-4ccd-b97f-948a1a6a2818",
              "parentUUID": "d0d63190-3d18-4677-a0e1-eba84fa64e10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18c04622-ffd4-4b31-84de-b319a02d7142",
            "ed07b3fe-4c0e-4ccd-b97f-948a1a6a2818"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
          "title": "Interactions - Not Strict - Query",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ignoring all query params",
              "fullTitle": "Interactions - Not Strict - Query ignoring all query params",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/query'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/query')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'snow')\n  .expectStatus(200);",
              "err": {},
              "uuid": "9f855744-2131-42d9-8920-54ef1a958b28",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ignoring few query params",
              "fullTitle": "Interactions - Not Strict - Query ignoring few query params",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/query',\n      queryParams: {\n        id: 1\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/query')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'snow')\n  .expectStatus(200);",
              "err": {},
              "uuid": "636e17b6-7b02-4df2-8015-89e106e5b678",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ignoring few query params - with like",
              "fullTitle": "Interactions - Not Strict - Query ignoring few query params - with like",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/query',\n      queryParams: like({\n        id: 2\n      })\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/query')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'snow')\n  .expectStatus(200);",
              "err": {},
              "uuid": "8e531196-810b-473e-afbb-87f1b8ee9eff",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all query params with like",
              "fullTitle": "Interactions - Not Strict - Query all query params with like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/query',\n      queryParams: like({\n        id: 2,\n        name: 'fall'\n      })\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/query')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'snow')\n  .expectStatus(200);",
              "err": {},
              "uuid": "a0de58e6-3f22-4907-8ec9-06927eacdd1b",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "additional query params with like",
              "fullTitle": "Interactions - Not Strict - Query additional query params with like",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/mock/query',\n        queryParams: like({\n          id: 2,\n          name: 'fall',\n          country: 'winter'\n        })\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/mock/query')\n    .withQueryParams('id', 1)\n    .withQueryParams('name', 'snow')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "69515401-2d74-43d2-93ee-3509379a8497",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expecting queries",
              "fullTitle": "Interactions - Not Strict - Query expecting queries",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/mock/query',\n        queryParams: like({\n          id: 2,\n          name: 'fall',\n          country: 'winter'\n        })\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/mock/query')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "bbbf6d1f-59f4-4779-8a25-c86401d772af",
              "parentUUID": "0b8e022d-1cf1-4f53-abbb-ad6ec1132dae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f855744-2131-42d9-8920-54ef1a958b28",
            "636e17b6-7b02-4df2-8015-89e106e5b678",
            "8e531196-810b-473e-afbb-87f1b8ee9eff",
            "a0de58e6-3f22-4907-8ec9-06927eacdd1b",
            "69515401-2d74-43d2-93ee-3509379a8497",
            "bbbf6d1f-59f4-4779-8a25-c86401d772af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
          "title": "Interactions - Not Strict - Path Params",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "including single path param",
              "fullTitle": "Interactions - Not Strict - Path Params including single path param",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/api/users/{user}',\n      pathParams: {\n        user: 'snow'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/users/{username}')\n  .withPathParams('username', 'snow')\n  .expectStatus(200);",
              "err": {},
              "uuid": "aaa50cb7-4312-4b0c-a685-c1354a438117",
              "parentUUID": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "including multiple path param",
              "fullTitle": "Interactions - Not Strict - Path Params including multiple path param",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/api/project/{project}/repo/{repo}/pr/{pr}',\n      pathParams: {\n        project: 'QA',\n        repo: 'automation',\n        pr: '1'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/project/{project}/repo/{repo}/pr/{pr}')\n  .withPathParams('project', 'QA')\n  .withPathParams('repo', 'automation')\n  .withPathParams({ pr: 1 })\n  .expectStatus(200);",
              "err": {},
              "uuid": "53544021-d885-4222-ade4-eb0b70709677",
              "parentUUID": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "including multiple path param with like matcher",
              "fullTitle": "Interactions - Not Strict - Path Params including multiple path param with like matcher",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/api/project/{project}/repo/{repo}/pr/{pr}',\n      pathParams: {\n        project: 'QA',\n        repo: 'automation',\n        pr: like('10')\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/project/{project}/repo/{repo}/pr/{pr}')\n  .withPathParams('project', 'QA')\n  .withPathParams('repo', 'automation')\n  .withPathParams({ pr: 1 })\n  .expectStatus(200);",
              "err": {},
              "uuid": "ecd84138-1763-4d93-88e8-f572db05d9f4",
              "parentUUID": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unequal path parts length",
              "fullTitle": "Interactions - Not Strict - Path Params unequal path parts length",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      strict: false,\n      request: {\n        method: 'GET',\n        path: '/api/project/{project}/repo/{repo}/pr/{pr}',\n        pathParams: {\n          project: 'QA',\n          repo: 'automation',\n          pr: '1'\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/projects/{project}/repo/{repo}')\n    .withPathParams('project', 'QA')\n    .withPathParams('repo', 'automation')\n    .withPathParams({ pr: 1 })\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "362dcbb0-d118-4026-ab7d-d240f0898e19",
              "parentUUID": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unequal path parts",
              "fullTitle": "Interactions - Not Strict - Path Params unequal path parts",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      strict: false,\n      request: {\n        method: 'GET',\n        path: '/api/project/{project}/repo/{repo}/pr/{pr}',\n        pathParams: {\n          project: 'QA',\n          repo: 'automation',\n          pr: '1'\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/projects/{project}/repo/{repo}/pr/{pr}')\n    .withPathParams('project', 'QA')\n    .withPathParams('repo', 'automation')\n    .withPathParams({ pr: 1 })\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "b0c7da42-636d-45da-a859-a00300d84b35",
              "parentUUID": "c81c9e96-80dd-40f6-bee9-f28e7304be8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aaa50cb7-4312-4b0c-a685-c1354a438117",
            "53544021-d885-4222-ade4-eb0b70709677",
            "ecd84138-1763-4d93-88e8-f572db05d9f4",
            "362dcbb0-d118-4026-ab7d-d240f0898e19",
            "b0c7da42-636d-45da-a859-a00300d84b35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "66147f05-0d55-4825-8aa5-550e48798ca1",
          "title": "Interactions - Not Strict - Headers",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "expecting an header",
              "fullTitle": "Interactions - Not Strict - Headers expecting an header",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      strict: false,\n      request: {\n        method: 'GET',\n        path: '/mock/header',\n        headers: {\n          'x': 'y'\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/mock/header')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "0320676e-dbc9-49a0-90d2-bab54ad4defc",
              "parentUUID": "66147f05-0d55-4825-8aa5-550e48798ca1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0320676e-dbc9-49a0-90d2-bab54ad4defc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "16e886f1-1a26-4144-99e4-b04c9793bc43",
          "title": "Interactions - Not Strict - Body",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ignoring body",
              "fullTitle": "Interactions - Not Strict - Body ignoring body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/mock/body'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/mock/body')\n  .withJson({\n    id: 1,\n    name: 'Jon',\n    married: true\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "b5a30ccb-75ad-4b8f-9d82-726143c945d8",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ignoring few properties in body",
              "fullTitle": "Interactions - Not Strict - Body ignoring few properties in body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/mock/body',\n      body: {\n        id: 1\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/mock/body')\n  .withJson({\n    id: 1,\n    name: 'Jon',\n    married: true\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "7e69fda4-4512-4b9f-9c61-627ac7be8976",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ignoring few properties in body - with like",
              "fullTitle": "Interactions - Not Strict - Body ignoring few properties in body - with like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/mock/body',\n      body: like({\n        id: 3,\n        married: false\n      })\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/mock/body')\n  .withJson({\n    id: 1,\n    name: 'Jon',\n    married: true\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "9711c986-7cf3-4134-b4c1-9ecd30f5e792",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ignoring few properties in body - with each like",
              "fullTitle": "Interactions - Not Strict - Body ignoring few properties in body - with each like",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/mock/body',\n      body: eachLike({\n        id: 3,\n        married: false\n      })\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/mock/body')\n  .withJson([\n    {\n      id: 1,\n      name: 'Jon',\n      married: true\n    },\n    {\n      id: 2,\n      name: 'Snow',\n      married: false\n    }\n  ])\n  .expectStatus(200);",
              "err": {},
              "uuid": "9d92d4da-65c1-4ed4-86b5-a66abe803ef1",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expecting extra properties in body",
              "fullTitle": "Interactions - Not Strict - Body expecting extra properties in body",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      strict: false,\n      request: {\n        method: 'POST',\n        path: '/mock/body',\n        body: {\n          id: 3,\n          married: false,\n          country: 'True North'\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .post('http://localhost:9393/mock/body')\n    .withJson({\n      id: 1,\n      name: 'Jon',\n      married: true\n    })\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "fbfb824c-8478-41db-b62e-470510261a1e",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expecting extra properties in body - with like",
              "fullTitle": "Interactions - Not Strict - Body expecting extra properties in body - with like",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      strict: false,\n      request: {\n        method: 'POST',\n        path: '/mock/body',\n        body: like({\n          id: 3,\n          married: false,\n          country: 'True North'\n        })\n      },\n      response: {\n        status: 200\n      }\n    })\n    .post('http://localhost:9393/mock/body')\n    .withJson({\n      id: 1,\n      name: 'Jon',\n      married: true\n    })\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "e8cdf241-431a-4e4a-abb6-352f984e6c66",
              "parentUUID": "16e886f1-1a26-4144-99e4-b04c9793bc43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5a30ccb-75ad-4b8f-9d82-726143c945d8",
            "7e69fda4-4512-4b9f-9c61-627ac7be8976",
            "9711c986-7cf3-4134-b4c1-9ecd30f5e792",
            "9d92d4da-65c1-4ed4-86b5-a66abe803ef1",
            "fbfb824c-8478-41db-b62e-470510261a1e",
            "e8cdf241-431a-4e4a-abb6-352f984e6c66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "14f6d58d-708d-4890-b59d-1dbd0df1a9c9",
          "title": "Interactions - Not Strict - Wait",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ignoring all query params",
              "fullTitle": "Interactions - Not Strict - Wait ignoring all query params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/query'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/query')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'snow')\n  .wait(1)\n  .expectStatus(200);",
              "err": {},
              "uuid": "9ee73572-68b8-4858-9cc8-537e6283b846",
              "parentUUID": "14f6d58d-708d-4890-b59d-1dbd0df1a9c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ee73572-68b8-4858-9cc8-537e6283b846"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2027c810-586a-42e5-b303-a922b6d1c042",
          "title": "Interactions - Not Strict - Follow Redirects",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Interactions - Not Strict - Follow Redirects\"",
              "fullTitle": "Interactions - Not Strict - Follow Redirects \"after each\" hook in \"Interactions - Not Strict - Follow Redirects\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setDefaultFollowRedirects(false);",
              "err": {},
              "uuid": "d3aa40b2-487f-49f3-bf01-d673a502b1a1",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "with Follow Redirects",
              "fullTitle": "Interactions - Not Strict - Follow Redirects with Follow Redirects",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/redirect'\n    },\n    response: {\n      status: 301,\n      headers: {\n        'location': 'http://localhost:9393/mock/actual'\n      }\n    }\n  })\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/actual'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/redirect')\n  .withFollowRedirects(true)\n  .expectStatus(200);",
              "err": {},
              "uuid": "51d6c5fb-62a1-4f43-b0ba-967ed09eeab2",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "without Follow Redirects",
              "fullTitle": "Interactions - Not Strict - Follow Redirects without Follow Redirects",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/redirect'\n    },\n    response: {\n      status: 301,\n      headers: {\n        'location': 'http://localhost:9393/mock/actual'\n      }\n    }\n  })\n  .get('http://localhost:9393/mock/redirect')\n  .expectStatus(301);",
              "err": {},
              "uuid": "0f7d1b9c-a0f6-4c7b-b264-042c97f3b185",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with Follow Redirects as false",
              "fullTitle": "Interactions - Not Strict - Follow Redirects with Follow Redirects as false",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/redirect'\n    },\n    response: {\n      status: 301,\n      headers: {\n        'location': 'http://localhost:9393/mock/actual'\n      }\n    }\n  })\n  .get('http://localhost:9393/mock/redirect')\n  .withFollowRedirects(false)\n  .expectStatus(301);",
              "err": {},
              "uuid": "a620a06b-5355-4f02-b5a7-35b4355ce31f",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default Follow Redirects",
              "fullTitle": "Interactions - Not Strict - Follow Redirects with default Follow Redirects",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setDefaultFollowRedirects(true);\nawait pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/redirect'\n    },\n    response: {\n      status: 301,\n      headers: {\n        'location': 'http://localhost:9393/mock/actual'\n      }\n    }\n  })\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/actual'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/mock/redirect')\n  .expectStatus(200);",
              "err": {},
              "uuid": "b65b3b1f-eef2-4066-992d-a5a266bfb953",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with Follow Redirects as false & default as true",
              "fullTitle": "Interactions - Not Strict - Follow Redirects with Follow Redirects as false & default as true",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.request.setDefaultFollowRedirects(true);\nawait pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'GET',\n      path: '/mock/redirect'\n    },\n    response: {\n      status: 301,\n      headers: {\n        'location': 'http://localhost:9393/mock/actual'\n      }\n    }\n  })\n  .get('http://localhost:9393/mock/redirect')\n  .withFollowRedirects(false)\n  .expectStatus(301);",
              "err": {},
              "uuid": "36799b6a-47dc-4ed9-bf5b-ae80e6a71597",
              "parentUUID": "2027c810-586a-42e5-b303-a922b6d1c042",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51d6c5fb-62a1-4f43-b0ba-967ed09eeab2",
            "0f7d1b9c-a0f6-4c7b-b264-042c97f3b185",
            "a620a06b-5355-4f02-b5a7-35b4355ce31f",
            "b65b3b1f-eef2-4066-992d-a5a266bfb953",
            "36799b6a-47dc-4ed9-bf5b-ae80e6a71597"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b70cc873-5d49-43a2-b0cf-ad1df5f57018",
          "title": "Interactions - Response - Headers",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.mock.spec.js",
          "file": "/test/component/interactions.mock.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with custom content-type headers",
              "fullTitle": "Interactions - Response - Headers with custom content-type headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/custom/header'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'any'\n      },\n      body: {\n        message: 'hello'\n      }\n    }\n  })\n  .get('http://localhost:9393/custom/header')\n  .expectStatus(200)\n  .expectHeader('content-type', 'any')\n  .expectJson('message', 'hello');",
              "err": {},
              "uuid": "908e7bca-3c54-4ae3-86ae-25a4e27681ba",
              "parentUUID": "b70cc873-5d49-43a2-b0cf-ad1df5f57018",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "908e7bca-3c54-4ae3-86ae-25a4e27681ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
          "title": "Mock",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.spec.js",
          "file": "/test/component/interactions.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - one interaction",
              "fullTitle": "Mock GET - one interaction",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .expectJsonSchema({\n    \"properties\": {\n      \"id\": {\n        \"type\": \"number\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"name\", \"id\"]\n  })\n  .expectJsonSchema('id', {\n    \"type\": \"number\"\n  })\n  .expectJson('id', 1)\n  .toss();",
              "err": {},
              "uuid": "a28cdb2d-fcd5-4f21-8bab-ef5c12eb7a89",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - without body",
              "fullTitle": "Mock GET - one interaction - without body",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 204,\n      headers: {\n        'content-type': 'application/json'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(204)\n  .toss();",
              "err": {},
              "uuid": "f5f0d815-6da8-41ff-848b-762e6dc1959e",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - bad response",
              "fullTitle": "Mock GET - one interaction - bad response",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 400,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'invalid request'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(400)\n  .expectJsonLike({\n    message: 'invalid request'\n  })\n  .toss();",
              "err": {},
              "uuid": "20b7968c-84f7-44ca-9e02-44f563ed1a67",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with one query",
              "fullTitle": "Mock GET - one interaction - with one query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        name: 'fake'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('name', 'fake')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "66fee7d4-81ec-4276-b4c4-fce44f7325f0",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with multiple queries",
              "fullTitle": "Mock GET - one interaction - with multiple queries",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        id: 1,\n        name: 'fake',\n        age: 27\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('id', 1)\n  .withQueryParams('name', 'fake')\n  .withQueryParams({ 'age': 27 })\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "d0abeb71-9c10-425b-92ef-e183b302cc00",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with query params",
              "fullTitle": "Mock GET - one interaction - with query params",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        id: 1,\n        name: 'fake'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams({\n    'id': 1,\n    'name': 'fake'\n  })\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "5f81dc1b-1963-4452-93b1-5cda140b56be",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with headers",
              "fullTitle": "Mock GET - one interaction - with headers",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      headers: {\n        'content-type': 'application/json',\n        'x-powered-by': 'phin',\n        'x-served-by': 'polka'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withHeaders('x-served-by', 'polka')\n  .withHeaders({\n    'content-type': 'application/json'\n  })\n  .withHeaders('x-powered-by', 'phin')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "7a3acc85-47d0-42cf-baed-114a3863e9d6",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with fixed delay",
              "fullTitle": "Mock GET - one interaction - with fixed delay",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      },\n      fixedDelay: 10\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .expectJsonSchema({\n    \"properties\": {\n      \"id\": {\n        \"type\": \"number\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"name\", \"id\"]\n  })\n  .expectJson('id', 1)\n  .toss();",
              "err": {},
              "uuid": "ebe15870-fdf7-48ac-ad57-eede72bdc6ee",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - with random delay",
              "fullTitle": "Mock GET - one interaction - with random delay",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      },\n      randomDelay: {\n        min: 10,\n        max: 15\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .expectJsonSchema({\n    \"properties\": {\n      \"id\": {\n        \"type\": \"number\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"name\", \"id\"]\n  })\n  .expectJson('id', 1)\n  .toss();",
              "err": {},
              "uuid": "4fe1d31e-f5de-47b9-b25c-956ccbcd6547",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction",
              "fullTitle": "Mock POST - one interaction",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'ok'\n      }\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "53b9ff07-7f10-4bc4-ba5f-7ec3ba52c464",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with body",
              "fullTitle": "Mock POST - one interaction - with body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      body: {\n        id: 1,\n        title: 'new fake'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'ok'\n      }\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withJson({\n    id: 1,\n    title: 'new fake'\n  })\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "a928d816-5f75-4c55-9c7e-dcd7f157bdaf",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with string as body",
              "fullTitle": "Mock POST - one interaction - with string as body",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/hello',\n      body: 'Hello World!'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/hello')\n  .withBody('Hello World!')\n  .expectStatus(200);",
              "err": {},
              "uuid": "a09ead0b-5ec6-4d76-9aad-67159fad79e0",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with form data",
              "fullTitle": "Mock POST - one interaction - with form data",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'ok'\n      }\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withForm({ 'user': 'drake' })\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "28cb603f-25b5-41d4-853c-4923e4e6079b",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with multi part form data",
              "fullTitle": "Mock POST - one interaction - with multi part form data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fs = require('fs');\nconst path = require('path');\nawait pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'ok'\n      }\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withMultiPartFormData('file', fs.readFileSync(path.resolve('./test/component/base.spec.js')), { contentType: 'application/js', filename: 'interactions.spec.js' })\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "7c5f619e-f698-4b9a-aa2c-a37907191489",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - with multi part form data instance",
              "fullTitle": "Mock POST - one interaction - with multi part form data instance",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fs = require('fs');\nconst path = require('path');\nconst form = new FormData();\nform.append('file', fs.readFileSync(path.resolve('./test/component/base.spec.js')), { contentType: 'application/js', filename: 'interactions.spec.js' });\nawait pactum.spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        message: 'ok'\n      }\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withMultiPartFormData(form)\n  .expectStatus(200)\n  .expectJson({\n    message: 'ok'\n  })\n  .toss();",
              "err": {},
              "uuid": "824f5208-deab-4b9a-b4ac-917ca8c9b6cc",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - invalid interaction",
              "fullTitle": "Mock GET - invalid interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/invalid/1')\n  .withQueryParams({ id: '1' })\n  .expectStatus(404)\n  .expectBody('Interaction Not Found')\n  .expectBodyContains('Not Found')\n  .toss();",
              "err": {},
              "uuid": "7a7d222a-3912-41e0-ba86-2e70aafdb4bf",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - invalid interaction",
              "fullTitle": "Mock POST - invalid interaction",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/projects')\n  .useLogLevel('DEBUG')\n  .withRequestTimeout(1000)\n  .withJson({\n    parent: {\n      child: [1, { grand: 3 }]\n    }\n  })\n  .expectStatus(404)\n  .expectBody('Interaction Not Found')\n  .expectBodyContains('Not Found')\n  .toss();",
              "err": {},
              "uuid": "54380666-a2cd-4923-af0f-8399a3a24f0f",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - invalid interaction",
              "fullTitle": "Mock PUT - invalid interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return pactum.spec()\n  .put('http://localhost:9393/api/projects/1')\n  .withBody(\"Hello\")\n  .expectStatus(404)\n  .expectBody('Interaction Not Found')\n  .expectHeader('connection', 'close')\n  .expectHeaderContains('connection', 'close');",
              "err": {},
              "uuid": "6e13649f-4302-4105-aead-99a6a73b9d45",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH - invalid interaction",
              "fullTitle": "Mock PATCH - invalid interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .patch('http://localhost:9393/api/projects/1')\n  .expectStatus(404)\n  .expectBody('Interaction Not Found')\n  .toss();",
              "err": {},
              "uuid": "8d51038d-214b-4a38-877c-ee5b33fa713c",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HEAD - invalid interaction",
              "fullTitle": "Mock HEAD - invalid interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .head('http://localhost:9393/api/projects/1')\n  .expectStatus(404)\n  .toss();",
              "err": {},
              "uuid": "d8aa3f12-4f0e-4468-870f-d8a3dacb45e4",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - empty on call",
              "fullTitle": "Mock GET - empty on call",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {}\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(404)\n  .toss();",
              "err": {},
              "uuid": "171e904e-68e1-410a-a975-ac8aac170ec3",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - 0th on call",
              "fullTitle": "Mock GET - 0th on call",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 200\n        }\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "60f16ccb-77f2-4be7-af50-d8b3077ac03d",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - with core options",
              "fullTitle": "Mock GET - with core options",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/core'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393')\n  .withCore({\n    path: '/api/core'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "af3afe6b-3f82-4ead-ada2-7560f7f443e3",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - with core options & auth",
              "fullTitle": "Mock GET - with core options & auth",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/core',\n      headers: {\n        'authorization': 'Basic dXNlcjpwYXNz'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393')\n  .withCore({\n    path: '/api/core'\n  })\n  .withAuth('user', 'pass')\n  .expectStatus(200);",
              "err": {},
              "uuid": "f9bfe22b-27ff-47ad-8dbc-21efc632f996",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - with auth",
              "fullTitle": "Mock GET - with auth",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/auth',\n      headers: {\n        'authorization': 'Basic dXNlcjpwYXNz'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/auth')\n  .withAuth('user', 'pass')\n  .expectStatus(200);",
              "err": {},
              "uuid": "e534d8b4-6eae-438a-86f2-e2ee97847df0",
              "parentUUID": "ce9989fd-cf98-4c8a-b144-1b371b67c8da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a28cdb2d-fcd5-4f21-8bab-ef5c12eb7a89",
            "f5f0d815-6da8-41ff-848b-762e6dc1959e",
            "20b7968c-84f7-44ca-9e02-44f563ed1a67",
            "66fee7d4-81ec-4276-b4c4-fce44f7325f0",
            "d0abeb71-9c10-425b-92ef-e183b302cc00",
            "5f81dc1b-1963-4452-93b1-5cda140b56be",
            "7a3acc85-47d0-42cf-baed-114a3863e9d6",
            "ebe15870-fdf7-48ac-ad57-eede72bdc6ee",
            "4fe1d31e-f5de-47b9-b25c-956ccbcd6547",
            "53b9ff07-7f10-4bc4-ba5f-7ec3ba52c464",
            "a928d816-5f75-4c55-9c7e-dcd7f157bdaf",
            "a09ead0b-5ec6-4d76-9aad-67159fad79e0",
            "28cb603f-25b5-41d4-853c-4923e4e6079b",
            "7c5f619e-f698-4b9a-aa2c-a37907191489",
            "824f5208-deab-4b9a-b4ac-917ca8c9b6cc",
            "7a7d222a-3912-41e0-ba86-2e70aafdb4bf",
            "54380666-a2cd-4923-af0f-8399a3a24f0f",
            "6e13649f-4302-4105-aead-99a6a73b9d45",
            "8d51038d-214b-4a38-877c-ee5b33fa713c",
            "d8aa3f12-4f0e-4468-870f-d8a3dacb45e4",
            "171e904e-68e1-410a-a975-ac8aac170ec3",
            "60f16ccb-77f2-4be7-af50-d8b3077ac03d",
            "af3afe6b-3f82-4ead-ada2-7560f7f443e3",
            "f9bfe22b-27ff-47ad-8dbc-21efc632f996",
            "e534d8b4-6eae-438a-86f2-e2ee97847df0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "483ebe32-ad1c-466a-afa2-a2ff2ce542b1",
          "title": "Pact - matchers",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.spec.js",
          "file": "/test/component/interactions.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - one interaction",
              "fullTitle": "Pact - matchers GET - one interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: like(1),\n        name: like('fake'),\n        gender: regex('M', /F|M/),\n        married: like(true),\n        favorite: {\n          books: eachLike('Harry Porter')\n        },\n        addresses: eachLike({ street: like('Road No. 60') })\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake',\n    gender: 'M',\n    married: true,\n    favorite: {\n      books: ['Harry Porter']\n    },\n    addresses: [\n      {\n        street: 'Road No. 60'\n      }\n    ]\n  })\n  .toss();",
              "err": {},
              "uuid": "a882e77e-bb11-41a1-beac-3c5600a4eb25",
              "parentUUID": "483ebe32-ad1c-466a-afa2-a2ff2ce542b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - array body",
              "fullTitle": "Pact - matchers GET - one interaction - array body",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: eachLike({\n        id: 1,\n        items: eachLike({\n          name: 'burger',\n          quantity: 2,\n          value: 100,\n        }),\n      })\n    }\n  })\n  .get('http://localhost:9393/api/projects')\n  .expectStatus(200)\n  .expectJsonLike([{\n    id: 1,\n    items: [{\n      name: 'burger',\n      quantity: 2,\n      value: 100\n    }]\n  }])\n  .toss();",
              "err": {},
              "uuid": "025ee71e-90d7-4a97-8997-4e3b032d9566",
              "parentUUID": "483ebe32-ad1c-466a-afa2-a2ff2ce542b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a882e77e-bb11-41a1-beac-3c5600a4eb25",
            "025ee71e-90d7-4a97-8997-4e3b032d9566"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c53d6a67-bd85-410c-a81d-08ee7b3b5461",
          "title": "Pact - VALID",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.spec.js",
          "file": "/test/component/interactions.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - one interaction",
              "fullTitle": "Pact - VALID GET - one interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    provider: 'test-provider',\n    state: 'when there is a project with id 1',\n    uponReceiving: 'a request for project 1',\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "17f5efa9-730b-4ff3-bbbc-bdf7b6b56d65",
              "parentUUID": "c53d6a67-bd85-410c-a81d-08ee7b3b5461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction",
              "fullTitle": "Pact - VALID GET - one interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    provider: 'test-provider',\n    state: 'when there is a project with id 1',\n    uponReceiving: 'a request for project 1',\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: like(1),\n        name: like('fake'),\n        gender: regex('M', 'F|M'),\n        married: like(true),\n        favorite: {\n          books: eachLike('Harry Porter')\n        },\n        addresses: eachLike({ street: like('Road No. 60') })\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake',\n    gender: 'M',\n    married: true,\n    favorite: {\n      books: ['Harry Porter']\n    },\n    addresses: [\n      {\n        street: 'Road No. 60'\n      }\n    ]\n  })\n  .toss();",
              "err": {},
              "uuid": "62a0d543-6987-4e15-9966-f65f85dbeab1",
              "parentUUID": "c53d6a67-bd85-410c-a81d-08ee7b3b5461",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - array body",
              "fullTitle": "Pact - VALID GET - one interaction - array body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    provider: 'test-provider-2',\n    state: 'when there is a project with id 1',\n    uponReceiving: 'a request for project 1',\n    request: {\n      method: 'GET',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: eachLike({\n        id: 1,\n        items: eachLike({\n          name: 'burger',\n          quantity: 2,\n          value: 100,\n        }),\n      })\n    }\n  })\n  .get('http://localhost:9393/api/projects')\n  .expectStatus(200)\n  .expectJsonLike([{\n    id: 1,\n    items: [{\n      name: 'burger',\n      quantity: 2,\n      value: 100\n    }]\n  }])\n  .toss();",
              "err": {},
              "uuid": "95cd97f5-a66d-4815-8b12-37f3ed695933",
              "parentUUID": "c53d6a67-bd85-410c-a81d-08ee7b3b5461",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17f5efa9-730b-4ff3-bbbc-bdf7b6b56d65",
            "62a0d543-6987-4e15-9966-f65f85dbeab1",
            "95cd97f5-a66d-4815-8b12-37f3ed695933"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "919da8fb-683a-4221-997d-353a040ac407",
          "title": "Interactions - expects skip check",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.spec.js",
          "file": "/test/component/interactions.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "skip expects - defaults",
              "fullTitle": "Interactions - expects skip check skip expects - defaults",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction([{\n    request: {\n      method: 'GET',\n      path: '/api/projects/{id}',\n      pathParams: {\n        id: '101'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        id: '$S{ProjectId}'\n      }\n    },\n    stores: {\n      ProjectId: 'req.pathParams.id'\n    },\n    expects: {\n      disable: true,\n      exercised: true,\n      callCount: 1\n    }\n  },\n  {\n    request: {\n      method: 'GET',\n      path: '/api/users/{id}',\n      pathParams: {\n        id: '1'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        id: '$S{UserId}'\n      }\n    },\n    stores: {\n      UserId: 'req.pathParams.id'\n    }\n  }])\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: '1'\n  })\n  .toss();",
              "err": {},
              "uuid": "2ce5aaed-a0c1-473a-a830-4016a2291bd7",
              "parentUUID": "919da8fb-683a-4221-997d-353a040ac407",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "skip expects (false) - failure",
              "fullTitle": "Interactions - expects skip check skip expects (false) - failure",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await pactum.spec()\n    .useInteraction([{\n      request: {\n        method: 'GET',\n        path: '/api/projects/{id}',\n        pathParams: {\n          id: '101'\n        }\n      },\n      response: {\n        status: 200,\n        body: {\n          id: '$S{ProjectId}'\n        }\n      },\n      stores: {\n        ProjectId: 'req.pathParams.id'\n      },\n      expects: {\n        disable: false\n      }\n    },\n    {\n      request: {\n        method: 'GET',\n        path: '/api/users/{id}',\n        pathParams: {\n          id: '1'\n        }\n      },\n      response: {\n        status: 200,\n        body: {\n          id: '$S{UserId}'\n        }\n      },\n      stores: {\n        UserId: 'req.pathParams.id'\n      },\n      expects: {\n        exercised: true,\n        callCount: 1\n      }\n    }])\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .expectJsonLike({\n      id: '1'\n    })\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Interaction not exercised: GET - /api/projects/{id}');",
              "err": {},
              "uuid": "c2ed41a0-f4b4-42b6-84df-1f027668fe7b",
              "parentUUID": "919da8fb-683a-4221-997d-353a040ac407",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ce5aaed-a0c1-473a-a830-4016a2291bd7",
            "c2ed41a0-f4b4-42b6-84df-1f027668fe7b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
          "title": "Interaction",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.stores.spec.js",
          "file": "/test/component/interactions.stores.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Stores - Path Params",
              "fullTitle": "Interaction Stores - Path Params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/{id}',\n      pathParams: {\n        id: '101'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        id: '$S{ProjectId}'\n      }\n    },\n    stores: {\n      ProjectId: 'req.pathParams.id'\n    }\n  })\n  .get('http://localhost:9393/api/projects/101')\n  .expectStatus(200)\n  .expectJson({\n    id: '101'\n  });",
              "err": {},
              "uuid": "96e00111-a72f-4a2a-896a-231477d49318",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stores - Query Params",
              "fullTitle": "Interaction Stores - Query Params",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects',\n      queryParams: {\n        id: '102'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        id: '$S{ProjectId}'\n      }\n    },\n    stores: {\n      ProjectId: 'req.queryParams.id'\n    }\n  })\n  .get('http://localhost:9393/api/projects')\n  .withQueryParams('id', '102')\n  .expectStatus(200)\n  .expectJson({\n    id: '102'\n  });",
              "err": {},
              "uuid": "49ef55c3-b6f2-4f84-a4b8-8a4ffd96ed45",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stores - Headers",
              "fullTitle": "Interaction Stores - Headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200,\n      body: {\n        token: '$S{Token}'\n      }\n    },\n    stores: {\n      Token: 'req.headers.token'\n    }\n  })\n  .get('http://localhost:9393/api/projects')\n  .withHeaders('token', 'xyz')\n  .expectStatus(200)\n  .expectJson({\n    token: 'xyz'\n  });",
              "err": {},
              "uuid": "a611f900-ead6-435a-ad05-335ac9eb769a",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stores - Body",
              "fullTitle": "Interaction Stores - Body",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      body: {\n        name: 'abc'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        name: '$S{Name}'\n      }\n    },\n    stores: {\n      Name: 'req.body.name'\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withJson({\n    'name': 'abc'\n  })\n  .expectStatus(200)\n  .expectJson({\n    name: 'abc'\n  });",
              "err": {},
              "uuid": "ed79937c-84bb-4691-bb65-eded6219b24e",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stores - Multiple",
              "fullTitle": "Interaction Stores - Multiple",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addCaptureHandler('GetID', ({ req }) => req.body.id);\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects',\n      body: {\n        id: 'id2',\n        name: 'abc2'\n      }\n    },\n    response: {\n      status: 200,\n      body: {\n        id: '$S{Id}',\n        name: '$S{Name}',\n        token: '$S{Token}'\n      }\n    },\n    stores: {\n      Id: '#GetID',\n      Name: 'req.body.name',\n      Token: 'req.headers.token'\n    }\n  })\n  .post('http://localhost:9393/api/projects')\n  .withHeaders('token', 'xyz2')\n  .withJson({\n    'id': 'id2',\n    'name': 'abc2'\n  })\n  .expectStatus(200)\n  .expectJson({\n    id: 'id2',\n    name: 'abc2',\n    token: 'xyz2'\n  });",
              "err": {},
              "uuid": "4ce392fd-785d-40e8-b204-782212558302",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stores - Duplicates",
              "fullTitle": "Interaction Stores - Duplicates",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.addInteraction({\n  id: 'stores-duplicate',\n  request: {\n    method: 'POST',\n    path: '/api/stores/duplicate',\n    body: like({\n      id: 1\n    })\n  },\n  stores: {\n    id: 'req.body.id'\n  },\n  response: {\n    status: 200,\n    body: {\n      id: '$S{id}'\n    }\n  }\n});\nawait pactum.spec()\n  .post('http://localhost:9393/api/stores/duplicate')\n  .withJson({\n    id: 10\n  })\n  .expectJson({\n    id: 10\n  });\nawait pactum.spec()\n  .post('http://localhost:9393/api/stores/duplicate')\n  .withJson({\n    id: 20\n  })\n  .expectJson({\n    id: 20\n  });\nmock.removeInteraction('stores-duplicate');",
              "err": {},
              "uuid": "2c7ae741-712a-47f6-8e78-0e6bdc77d3ca",
              "parentUUID": "7a9a4a6e-4418-4509-a82e-e7e0966d20b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96e00111-a72f-4a2a-896a-231477d49318",
            "49ef55c3-b6f2-4f84-a4b8-8a4ffd96ed45",
            "a611f900-ead6-435a-ad05-335ac9eb769a",
            "ed79937c-84bb-4691-bb65-eded6219b24e",
            "4ce392fd-785d-40e8-b204-782212558302",
            "2c7ae741-712a-47f6-8e78-0e6bdc77d3ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e83e03e4-0fe1-49e6-ab90-0de96d318bc1",
          "title": "Interactions - Strict - Query",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/interactions.strict.spec.js",
          "file": "/test/component/interactions.strict.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "additional actual query params",
              "fullTitle": "Interactions - Strict - Query additional actual query params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/projects',\n        queryParams: {\n          id: 1\n        }\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/projects')\n    .withQueryParams('id', 1)\n    .withQueryParams('name', 'snow')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.to.be.undefined;",
              "err": {},
              "uuid": "a98ed965-d3a8-4da5-a27d-2a6f60e7f578",
              "parentUUID": "e83e03e4-0fe1-49e6-ab90-0de96d318bc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a98ed965-d3a8-4da5-a27d-2a6f60e7f578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
          "title": "Request Matchers",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/matching.spec.js",
          "file": "/test/component/matching.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - one interaction - like",
              "fullTitle": "Request Matchers GET - one interaction - like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        date: like('08/04/2020')\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('date', '12/00/9632')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "f92696a4-3ddf-418d-8150-0dff470942b8",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - regex instance",
              "fullTitle": "Request Matchers GET - one interaction - regex instance",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        date: regex('08/04/2020', /\\w+/g)\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('date', '12/00/9632')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "a80fd53e-fed6-47ae-8523-99da4b42b04a",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - regex string",
              "fullTitle": "Request Matchers GET - one interaction - regex string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        date: regex('08/04/2020', \"\\\\w+\")\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('date', '12/00/9632')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "40246bfe-5f88-4775-bba6-3160ff7165e6",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - query regex date",
              "fullTitle": "Request Matchers GET - one interaction - query regex date",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        date: regex('2020-12-12', /^\\d{4}-\\d{2}-\\d{2}$/)\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('date', '2020-06-24')\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "1e045cd4-a7f5-41b1-aaf6-b34681b18ed8",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - regex instance",
              "fullTitle": "Request Matchers POST - one interaction - regex instance",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects/1',\n      body: {\n        id: regex(123, /\\d+/),\n        name: 'Bark'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects/1')\n  .withBody({\n    id: 100,\n    name: 'Bark'\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "9fc948f2-ead6-4506-8ddd-4c78dbf0bf56",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - regex string",
              "fullTitle": "Request Matchers POST - one interaction - regex string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      body: {\n        id: regex(123, \"\\\\d+\"),\n        name: 'Bark'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withBody({\n    id: 100,\n    name: 'Bark'\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "035449bc-b81c-413b-9baf-bd9c460b9785",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - one interaction - each like",
              "fullTitle": "Request Matchers POST - one interaction - each like",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/projects/1',\n      body: eachLike({\n        id: regex(123, /\\d+/),\n        name: 'Bark'\n      })\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/projects/1')\n  .withBody([{\n    id: 100,\n    name: 'Bark'\n  }])\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "c7b7da16-3630-480a-99b6-4654b2fa2bfa",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - includes",
              "fullTitle": "Request Matchers GET - one interaction - includes",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      queryParams: {\n        date: includes('2020')\n      },\n      headers: {\n        'x-Request-Id': includes('PutItem')\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withQueryParams('date', '12/00/2020')\n  .withHeaders({\n    'x-request-id': 'DynamoDB.2018.PutItem'\n  })\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "7160dcf0-4384-4c93-841f-0f65a0a29bd5",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - headers like",
              "fullTitle": "Request Matchers GET - one interaction - headers like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      headers: {\n        date: like('08/04/2020')\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withHeaders({'date': '12/00/9632', 'place': 'hyd'})\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "4ecccf75-cdf4-4832-ae6c-0633c414a711",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - one interaction - multiple headers like",
              "fullTitle": "Request Matchers GET - one interaction - multiple headers like",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1',\n      headers: {\n        date: like('08/04/2020'),\n        place: 'hyd'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .withHeaders({'date': '12/00/9632', 'place': 'hyd'})\n  .expectStatus(200)\n  .expectJsonLike({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "e268d9d9-cea3-4d32-94a2-9347a63896a5",
              "parentUUID": "b37c4679-b80d-46a4-a54f-74ff79e4c992",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f92696a4-3ddf-418d-8150-0dff470942b8",
            "a80fd53e-fed6-47ae-8523-99da4b42b04a",
            "40246bfe-5f88-4775-bba6-3160ff7165e6",
            "1e045cd4-a7f5-41b1-aaf6-b34681b18ed8",
            "9fc948f2-ead6-4506-8ddd-4c78dbf0bf56",
            "035449bc-b81c-413b-9baf-bd9c460b9785",
            "c7b7da16-3630-480a-99b6-4654b2fa2bfa",
            "7160dcf0-4384-4c93-841f-0f65a0a29bd5",
            "4ecccf75-cdf4-4832-ae6c-0633c414a711",
            "e268d9d9-cea3-4d32-94a2-9347a63896a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
          "title": "Mock Interactions - Handler",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/mock.handler.spec.js",
          "file": "/test/component/mock.handler.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Mock Interactions - Handler\"",
              "fullTitle": "Mock Interactions - Handler \"before all\" hook in \"Mock Interactions - Handler\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addInteractionHandler('get projects', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/api/projects'\n    },\n    response: {\n      status: 200\n    }\n  };\n});\nhandler.addInteractionHandler('get project', (ctx) => {\n  return {\n    request: {\n      method: 'GET',\n      path: `/api/projects/${ctx.data}`\n    },\n    response: {\n      status: 200\n    }\n  };\n});\nhandler.addInteractionHandler('get parent', (ctx) => {\n  return {\n    request: {\n      method: 'GET',\n      path: `/api/parent/${ctx.data}`\n    },\n    response: {\n      status: 200\n    }\n  };\n});\nhandler.addInteractionHandler('get child', (ctx) => {\n  return {\n    name: 'get parent',\n    data: ctx.data || 'child'\n  };\n});\nhandler.addInteractionHandler('get sub child', () => {\n  return {\n    name: 'get child',\n    data: 'child/sub'\n  };\n});\nhandler.addInteractionHandler('get users with ids', (ctx) => {\n  const { data } = ctx;\n  const interactions = [];\n  for (let i = 0; i < data.length; i++) {\n    interactions.push({\n      request: {\n        method: 'GET',\n        path: `/api/users/${data[i]}`\n      },\n      response: {\n        status: 200\n      }\n    });\n  }\n  return interactions;\n});\nhandler.addInteractionHandler('get parents', (ctx) => {\n  const { data } = ctx;\n  const interactions = [];\n  for (let i = 0; i < data.length; i++) {\n    interactions.push({\n      name: 'get parent',\n      data: data[i]\n    });\n  }\n  return interactions;\n});",
              "err": {},
              "uuid": "a45190bf-33ce-409c-a922-5402a008bcd2",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - with handler name",
              "fullTitle": "Mock Interactions - Handler GET - with handler name",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get projects')\n  .get('http://localhost:9393/api/projects')\n  .expectStatus(200);",
              "err": {},
              "uuid": "915a49ce-dcf2-43b0-a413-4df33bbfceff",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - handler name & custom data",
              "fullTitle": "Mock Interactions - Handler GET - handler name & custom data",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get project', 1)\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200);",
              "err": {},
              "uuid": "0cd6b174-adde-4417-b2f4-56d99a2de236",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - child handler",
              "fullTitle": "Mock Interactions - Handler GET - child handler",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get child')\n  .get('http://localhost:9393/api/parent/child')\n  .expectStatus(200);",
              "err": {},
              "uuid": "022ce399-1b9e-43c7-8b87-46ff463a11b0",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - sub child handler",
              "fullTitle": "Mock Interactions - Handler GET - sub child handler",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get sub child')\n  .get('http://localhost:9393/api/parent/child/sub')\n  .expectStatus(200);",
              "err": {},
              "uuid": "82a7fec3-41d4-4159-acb3-b1c17379ae09",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - handler name & custom data by default mock",
              "fullTitle": "Mock Interactions - Handler GET - handler name & custom data by default mock",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.addInteraction({ name: 'get project', data: 1 });\nawait pactum.spec()\n  .get('http://localhost:9393/api/projects/1')\n  .expectStatus(200);\nmock.clearInteractions();",
              "err": {},
              "uuid": "dcd72ade-8686-4178-b6ee-57e31310103f",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - single handler - multiple interactions",
              "fullTitle": "Mock Interactions - Handler GET - single handler - multiple interactions",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const specWait = pactum.spec()\n  .get('http://localhost:9393/api/users/1')\n  .expectStatus(200);\nawait pactum.spec()\n  .useInteraction('get users with ids', [1, 2])\n  .get('http://localhost:9393/api/users/2')\n  .expectStatus(200)\n  .wait(specWait);",
              "err": {},
              "uuid": "7506bd1d-8687-429d-97ff-24678cf87827",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - single handler - multiple interactions - one interaction not exercised - throws error",
              "fullTitle": "Mock Interactions - Handler GET - single handler - multiple interactions - one interaction not exercised - throws error",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  const specWait = pactum.spec()\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200);\n  await pactum.spec()\n    .useInteraction('get users with ids', [1, 2])\n    .get('http://localhost:9393/api/users/1')\n    .expectStatus(200)\n    .wait(specWait);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "4fc46b13-2b4f-45e7-9733-10461ce1df6f",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - single handler - multiple parent interactions",
              "fullTitle": "Mock Interactions - Handler GET - single handler - multiple parent interactions",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const specWait = pactum.spec()\n  .get('http://localhost:9393/api/parent/1')\n  .expectStatus(200);\nawait pactum.spec()\n  .useInteraction('get parents', [1, 2])\n  .get('http://localhost:9393/api/parent/2')\n  .expectStatus(200)\n  .wait(specWait);",
              "err": {},
              "uuid": "941795ec-8b2d-43fc-a62d-bf2701ea15ad",
              "parentUUID": "9d66264e-2f81-4f9b-b6ea-f81610dd6e82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "915a49ce-dcf2-43b0-a413-4df33bbfceff",
            "0cd6b174-adde-4417-b2f4-56d99a2de236",
            "022ce399-1b9e-43c7-8b87-46ff463a11b0",
            "82a7fec3-41d4-4159-acb3-b1c17379ae09",
            "dcd72ade-8686-4178-b6ee-57e31310103f",
            "7506bd1d-8687-429d-97ff-24678cf87827",
            "4fc46b13-2b4f-45e7-9733-10461ce1df6f",
            "941795ec-8b2d-43fc-a62d-bf2701ea15ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "25af6983-e790-46fb-9e0a-088e669d9b2d",
          "title": "Non CRUD Requests - Numbered Waits",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/non.crud.spec.js",
          "file": "/test/component/non.crud.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Non CRUD Requests - Numbered Waits\"",
              "fullTitle": "Non CRUD Requests - Numbered Waits \"before all\" hook in \"Non CRUD Requests - Numbered Waits\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addInteractionHandler('get bg', () => {\n  return {\n    background: true,\n    request: {\n      method: 'GET',\n      path: '/api/bg'\n    },\n    response: {\n      status: 200\n    }\n  }\n});\nconfig.response.wait.duration = 10;\nconfig.response.wait.polling = 1;",
              "err": {},
              "uuid": "ba08255b-0104-4617-b0e6-1e0e49044e99",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should exercise bg interaction without wait",
              "fullTitle": "Non CRUD Requests - Numbered Waits should exercise bg interaction without wait",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get bg')\n  .get('http://localhost:9393/api/bg')\n  .expectStatus(200);",
              "err": {},
              "uuid": "5abd513c-10d1-415c-bc57-c8d84db7c938",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should exercise bg interaction with default wait",
              "fullTitle": "Non CRUD Requests - Numbered Waits should exercise bg interaction with default wait",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get bg')\n  .get('http://localhost:9393/api/bg')\n  .expectStatus(200)\n  .wait();",
              "err": {},
              "uuid": "6f91d451-31d8-4231-97ce-03c1cab809a5",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with response exceptions when bg interactions are present",
              "fullTitle": "Non CRUD Requests - Numbered Waits should fail with response exceptions when bg interactions are present",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useLogLevel('ERROR')\n    .useInteraction('get bg')\n    .get('http://localhost:9393/api/bg/fake')\n    .expectStatus(200);\n} catch (error) {\n  err = error\n}\nexpect(err.message).equals('HTTP status 404 !== 200');",
              "err": {},
              "uuid": "6344db68-19c9-4206-9bdc-a7405d794b56",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when bg interactions are not exercised without any waits",
              "fullTitle": "Non CRUD Requests - Numbered Waits should fail when bg interactions are not exercised without any waits",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useLogLevel('ERROR')\n    .useInteraction('get bg')\n    .get('http://localhost:9393/api/bg/fake')\n    .expectStatus(404);\n} catch (error) {\n  err = error\n}\nexpect(err.message).equals('Interaction not exercised: GET - /api/bg');",
              "err": {},
              "uuid": "a7d07c50-770c-4fe2-bc38-0746d1235d0f",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when bg interactions are not exercised with default waits",
              "fullTitle": "Non CRUD Requests - Numbered Waits should fail when bg interactions are not exercised with default waits",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useLogLevel('ERROR')\n    .useInteraction('get bg')\n    .get('http://localhost:9393/api/bg/fake')\n    .expectStatus(404)\n    .wait();\n} catch (error) {\n  err = error\n}\nexpect(err.message).equals('Interaction not exercised: GET - /api/bg');",
              "err": {},
              "uuid": "3c0c15b9-40f5-4daa-8b72-9eb5033a1e03",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when bg interactions are not exercised with custom wait with duration",
              "fullTitle": "Non CRUD Requests - Numbered Waits should fail when bg interactions are not exercised with custom wait with duration",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useLogLevel('ERROR')\n    .useInteraction('get bg')\n    .get('http://localhost:9393/api/bg/fake')\n    .expectStatus(404)\n    .wait(20);\n} catch (error) {\n  err = error\n}\nexpect(err.message).equals('Interaction not exercised: GET - /api/bg');",
              "err": {},
              "uuid": "58ade6e8-16d7-41f8-bd6d-f1b85872eb15",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when bg interactions are not exercised with custom wait with duration and polling",
              "fullTitle": "Non CRUD Requests - Numbered Waits should fail when bg interactions are not exercised with custom wait with duration and polling",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useLogLevel('ERROR')\n    .useInteraction('get bg')\n    .get('http://localhost:9393/api/bg/fake')\n    .expectStatus(404)\n    .wait(20, 7);\n} catch (error) {\n  err = error\n}\nexpect(err.message).equals('Interaction not exercised: GET - /api/bg');",
              "err": {},
              "uuid": "a9ae34cf-8a1b-44a7-a87d-20c546e1dd9a",
              "parentUUID": "25af6983-e790-46fb-9e0a-088e669d9b2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5abd513c-10d1-415c-bc57-c8d84db7c938",
            "6f91d451-31d8-4231-97ce-03c1cab809a5",
            "6344db68-19c9-4206-9bdc-a7405d794b56",
            "a7d07c50-770c-4fe2-bc38-0746d1235d0f",
            "3c0c15b9-40f5-4daa-8b72-9eb5033a1e03",
            "58ade6e8-16d7-41f8-bd6d-f1b85872eb15",
            "a9ae34cf-8a1b-44a7-a87d-20c546e1dd9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b124452b-df6e-411a-9d89-fb51f1847ed3",
          "title": "Non CRUD Requests - Wait Handlers",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/non.crud.spec.js",
          "file": "/test/component/non.crud.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Non CRUD Requests - Wait Handlers\"",
              "fullTitle": "Non CRUD Requests - Wait Handlers \"before all\" hook in \"Non CRUD Requests - Wait Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addInteractionHandler('get bg', () => {\n  return {\n    background: true,\n    request: {\n      method: 'GET',\n      path: '/api/bg'\n    },\n    response: {\n      status: 200\n    }\n  }\n});\naddWaitHandler('send request to /api/bg', async (ctx) => {\n  await pactum.spec()\n    .get('http://localhost:9393/api/bg')\n    .expectStatus(ctx.data || 200);\n});\nconfig.response.wait.duration = 10;\nconfig.response.wait.polling = 1;",
              "err": {},
              "uuid": "d74bea22-6785-4ea2-bb7d-601e3dcb56fc",
              "parentUUID": "b124452b-df6e-411a-9d89-fb51f1847ed3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should exercise bg interaction with wait handler",
              "fullTitle": "Non CRUD Requests - Wait Handlers should exercise bg interaction with wait handler",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get bg')\n  .get('http://localhost:9393/api/bg/1')\n  .expectStatus(404)\n  .wait('send request to /api/bg');",
              "err": {},
              "uuid": "4c220e8a-a366-4dc5-8518-e6423fe58fb7",
              "parentUUID": "b124452b-df6e-411a-9d89-fb51f1847ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait without background interactions",
              "fullTitle": "Non CRUD Requests - Wait Handlers should wait without background interactions",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/bg/1')\n  .expectStatus(404)\n  .wait('send request to /api/bg', 404);",
              "err": {},
              "uuid": "212871a0-1110-4c66-b0f6-e75b8ff31398",
              "parentUUID": "b124452b-df6e-411a-9d89-fb51f1847ed3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when wait handler fails",
              "fullTitle": "Non CRUD Requests - Wait Handlers should fail when wait handler fails",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n  .get('http://localhost:9393/api/bg/1')\n  .expectStatus(404)\n  .wait('send request to /api/bg', 500);\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals('HTTP status 404 !== 500');",
              "err": {},
              "uuid": "8986baff-4040-497b-9a58-4183afc68003",
              "parentUUID": "b124452b-df6e-411a-9d89-fb51f1847ed3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c220e8a-a366-4dc5-8518-e6423fe58fb7",
            "212871a0-1110-4c66-b0f6-e75b8ff31398",
            "8986baff-4040-497b-9a58-4183afc68003"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
          "title": "Default Recorder",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/recorder.spec.js",
          "file": "/test/component/recorder.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Default Recorder\"",
              "fullTitle": "Default Recorder \"before all\" hook in \"Default Recorder\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultRecorders('TraceId', 'req.headers.x-trace-id');\nrequest.setDefaultRecorders('Method', 'req.body.method');\nrequest.setDefaultRecorders('Connection', 'res.headers.connection');\nrequest.setDefaultRecorders('Path', 'res.body.path');",
              "err": {},
              "uuid": "2db5d7a8-ea02-4b04-8acb-eeb9cd11d372",
              "parentUUID": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Default Recorder\"",
              "fullTitle": "Default Recorder \"after all\" hook in \"Default Recorder\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.getDefaultRecorders().length = 0;",
              "err": {},
              "uuid": "e4140250-3e65-4240-9fa7-76b81286cdfc",
              "parentUUID": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "res header data to recorder",
              "fullTitle": "Default Recorder res header data to recorder",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200);",
              "err": {},
              "uuid": "c56b4458-5f4a-493a-8b7b-b437a0f9ce29",
              "parentUUID": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "req header & res body to recorder",
              "fullTitle": "Default Recorder req header & res body to recorder",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .withHeaders('x-trace-id', 'id')\n  .expectStatus(200);",
              "err": {},
              "uuid": "2e1b3558-64e8-4f60-8f0a-e886f5b52d13",
              "parentUUID": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "req body data to recorder",
              "fullTitle": "Default Recorder req body data to recorder",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default post')\n  .post('http://localhost:9393/default/post')\n  .withJson({\n    method: 'POST',\n    path: '/default/post'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "91c25858-5080-4780-b6ab-4bbedc7a63dc",
              "parentUUID": "e69c52e8-628b-4efb-9006-6f6c4d1f0db8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c56b4458-5f4a-493a-8b7b-b437a0f9ce29",
            "2e1b3558-64e8-4f60-8f0a-e886f5b52d13",
            "91c25858-5080-4780-b6ab-4bbedc7a63dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a4343725-cbba-42b4-a709-8e49a17100dc",
          "title": "Recorder",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/recorder.spec.js",
          "file": "/test/component/recorder.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Recorder\"",
              "fullTitle": "Recorder \"after all\" hook in \"Recorder\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.getDefaultRecorders().length = 0;",
              "err": {},
              "uuid": "03f1fff7-36bf-4bf7-a916-3425568431eb",
              "parentUUID": "a4343725-cbba-42b4-a709-8e49a17100dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "res header data to recorder",
              "fullTitle": "Recorder res header data to recorder",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .records('Method', 'method')\n  .records('Path', 'res.body.path')\n  .expectStatus(200);",
              "err": {},
              "uuid": "30f0d27a-ed50-45be-b50b-ada2b15a89ab",
              "parentUUID": "a4343725-cbba-42b4-a709-8e49a17100dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "res header data to recorder using capture handler",
              "fullTitle": "Recorder res header data to recorder using capture handler",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addCaptureHandler('GetMethod', ({ res }) => res.json.method);\nconst spec = pactum.spec();\nawait spec\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .records('Method', '#GetMethod')\n  .expectStatus(200);\nspec.records('Path', 'res.body.path');",
              "err": {},
              "uuid": "24a48b17-0f47-474c-89fa-eed32a38d439",
              "parentUUID": "a4343725-cbba-42b4-a709-8e49a17100dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mocha context",
              "fullTitle": "Recorder mocha context",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .records('context', this)\n  .expectStatus(200);",
              "err": {},
              "uuid": "52c0f335-0c8e-402c-9c30-7dd8292de9ea",
              "parentUUID": "a4343725-cbba-42b4-a709-8e49a17100dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30f0d27a-ed50-45be-b50b-ada2b15a89ab",
            "24a48b17-0f47-474c-89fa-eed32a38d439",
            "52c0f335-0c8e-402c-9c30-7dd8292de9ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
          "title": "Remote Server - use with spec",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.server.spec.js",
          "file": "/test/component/remote.server.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Remote Server - use with spec\"",
              "fullTitle": "Remote Server - use with spec \"before all\" hook in \"Remote Server - use with spec\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.useRemoteServer('http://localhost:9393');\nhandler.addInteractionHandler('mock remote handler', (ctx) => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/remote/mock/handler'\n    },\n    response: {\n      status: 200,\n      body: ctx.data\n    }\n  };\n});\nhandler.addInteractionHandler('pact remote handler', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/remote'\n    },\n    response: {\n      status: 200\n    }\n  };\n});",
              "err": {},
              "uuid": "57f0bea5-46a8-411f-8cfa-74130bec95b3",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Remote Server - use with spec\"",
              "fullTitle": "Remote Server - use with spec \"after all\" hook in \"Remote Server - use with spec\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mock.clearInteractions();\nconfig.mock.remote = '';",
              "err": {},
              "uuid": "a6d26bb0-9051-4214-9203-f52f23aafb5a",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "useInteraction",
              "fullTitle": "Remote Server - use with spec useInteraction",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/remote'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/remote')\n  .expectStatus(200);\nawait pactum.spec()\n  .get('http://localhost:9393/remote')\n  .expectStatus(404);",
              "err": {},
              "uuid": "f0c80fc7-e825-43c9-af2f-781dd7a17449",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "useInteraction - handler",
              "fullTitle": "Remote Server - use with spec useInteraction - handler",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('mock remote handler', 'hello remote')\n  .get('http://localhost:9393/remote/mock/handler')\n  .expectStatus(200)\n  .expectBody('hello remote');\nawait pactum.spec()\n  .useInteraction('mock remote handler', 'hello remote')\n  .get('http://localhost:9393/remote/mock/handler')\n  .expectStatus(200)\n  .expectBody('hello remote');\nawait pactum.spec()\n  .get('http://localhost:9393/remote/mock/handler')\n  .expectStatus(404);",
              "err": {},
              "uuid": "61ef739b-33ab-4a0a-bbf2-707d69445dc4",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "useInteraction - handler not found",
              "fullTitle": "Remote Server - use with spec useInteraction - handler not found",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('random mock remote handler', 'hello remote')\n    .get('http://localhost:9393/remote/mock/handler')\n    .expectStatus(200)\n    .expectBody('hello remote');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains(`Interaction Handler Not Found - 'random mock remote handler'`);",
              "err": {},
              "uuid": "3e5e6580-4d2d-4368-8339-e1f241247766",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "useInteraction",
              "fullTitle": "Remote Server - use with spec useInteraction",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    provider: 'remote-provider',\n    state: 'remote-state',\n    uponReceiving: 'remote-desc',\n    request: {\n      method: 'GET',\n      path: '/remote'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/remote')\n  .expectStatus(200);\nawait pactum.spec()\n  .get('http://localhost:9393/remote')\n  .expectStatus(404);",
              "err": {},
              "uuid": "a5e6f4b0-a3c7-4cb5-b531-0a9822605694",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "useInteraction - handler",
              "fullTitle": "Remote Server - use with spec useInteraction - handler",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('pact remote handler', 'hello remote')\n  .get('http://localhost:9393/remote')\n  .expectStatus(200);\nawait pactum.spec()\n  .get('http://localhost:9393/remote')\n  .expectStatus(404);",
              "err": {},
              "uuid": "25f52c02-b1d0-4896-a120-5c85868cac06",
              "parentUUID": "ab02209c-7d33-4894-9e10-0b5c5bb087e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0c80fc7-e825-43c9-af2f-781dd7a17449",
            "61ef739b-33ab-4a0a-bbf2-707d69445dc4",
            "3e5e6580-4d2d-4368-8339-e1f241247766",
            "a5e6f4b0-a3c7-4cb5-b531-0a9822605694",
            "25f52c02-b1d0-4896-a120-5c85868cac06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "04a6f156-0fed-4436-bcfa-889396972816",
          "title": "Remote Server - before and after spec",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.server.spec.js",
          "file": "/test/component/remote.server.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Remote Server - before and after spec\"",
              "fullTitle": "Remote Server - before and after spec \"before all\" hook in \"Remote Server - before and after spec\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mock.useRemoteServer('http://localhost:9393');\nhandler.addInteractionHandler('mock remote handler', () => {\n  return {\n    id: 'id2',\n    request: {\n      method: 'GET',\n      path: '/remote/mock/handler'\n    },\n    response: {\n      status: 200\n    }\n  };\n});",
              "err": {},
              "uuid": "499edc9b-1b55-4b15-ba0d-1d63f13add99",
              "parentUUID": "04a6f156-0fed-4436-bcfa-889396972816",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Remote Server - before and after spec\"",
              "fullTitle": "Remote Server - before and after spec \"after all\" hook in \"Remote Server - before and after spec\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mock.clearInteractions();\nconfig.mock.remote = '';",
              "err": {},
              "uuid": "f38a7bb9-b6df-4a4a-8972-6bdb956a2639",
              "parentUUID": "04a6f156-0fed-4436-bcfa-889396972816",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "add mock interaction & get",
              "fullTitle": "Remote Server - before and after spec add mock interaction & get",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = await mock.addInteraction({\n  id: 'id',\n  request: {\n    method: 'GET',\n    path: '/remote/get'\n  },\n  response: {\n    status: 200\n  }\n});\nexpect(id).equals('id');\nconst interaction = await mock.getInteraction('id');\nexpect(interaction).deep.equals({\n  id: 'id',\n  \"strict\": true,\n  request: { method: 'GET', path: '/remote/get', \"matchingRules\": {}, \"queryParams\": {} },\n  response: { status: 200, \"matchingRules\": {} },\n  callCount: 0,\n  \"calls\": [],\n  \"exercised\": false,\n  expects: { disable: false, exercised: true }\n});",
              "err": {},
              "uuid": "0cd3b94f-86d8-4371-bc21-bf121191e1ea",
              "parentUUID": "04a6f156-0fed-4436-bcfa-889396972816",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add mock interactions & get them",
              "fullTitle": "Remote Server - before and after spec add mock interactions & get them",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ids = await mock.addInteraction([\n  {\n    id: 'id1',\n    request: {\n      method: 'GET',\n      path: '/remote/get'\n    },\n    response: {\n      status: 200\n    }\n  },\n  {\n    id: 'id2',\n    request: {\n      method: 'GET',\n      path: '/remote/get'\n    },\n    response: {\n      status: 200\n    }\n  }\n]);\nexpect(ids).deep.equals(['id1', 'id2']);\nconst interactions = await mock.getInteraction(['id1', 'id2']);\nexpect(interactions).deep.equals([\n  {\n    id: 'id1',\n    \"strict\": true,\n    request: { method: 'GET', path: '/remote/get', \"matchingRules\": {}, \"queryParams\": {} },\n    response: { status: 200, \"matchingRules\": {} },\n    callCount: 0,\n    \"calls\": [],\n    \"exercised\": false,\n    expects: { disable: false, exercised: true }\n  },\n  {\n    id: 'id2',\n    \"strict\": true,\n    request: { method: 'GET', path: '/remote/get', \"matchingRules\": {}, \"queryParams\": {} },\n    response: { status: 200, \"matchingRules\": {} },\n    callCount: 0,\n    \"calls\": [],\n    \"exercised\": false,\n    expects: { disable: false, exercised: true }\n  }\n]);",
              "err": {},
              "uuid": "e457f133-ed4a-4f5c-8e0d-37989eea19b8",
              "parentUUID": "04a6f156-0fed-4436-bcfa-889396972816",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add mock interactions with a handler & get them",
              "fullTitle": "Remote Server - before and after spec add mock interactions with a handler & get them",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ids = await mock.addInteraction([\n  {\n    id: 'id1',\n    request: {\n      method: 'GET',\n      path: '/remote/get'\n    },\n    response: {\n      status: 200\n    }\n  },\n  'mock remote handler'\n]);\nexpect(ids).deep.equals(['id1', 'id2']);\nconst interactions = await mock.getInteraction(['id1', 'id2']);\nexpect(interactions).deep.equals([\n  {\n    id: 'id1',\n    \"strict\": true,\n    request: { method: 'GET', path: '/remote/get', \"matchingRules\": {}, \"queryParams\": {} },\n    response: { status: 200, \"matchingRules\": {} },\n    callCount: 0,\n    \"calls\": [],\n    \"exercised\": false,\n    expects: { disable: false, exercised: true }\n  },\n  {\n    id: 'id2',\n    \"strict\": true,\n    request: { method: 'GET', path: '/remote/mock/handler', \"matchingRules\": {}, \"queryParams\": {} },\n    response: { status: 200, \"matchingRules\": {} },\n    callCount: 0,\n    \"calls\": [],\n    \"exercised\": false,\n    expects: { disable: false, exercised: true }\n  }\n]);",
              "err": {},
              "uuid": "50b7badf-3843-458c-aa3e-3ad41d2ce7b0",
              "parentUUID": "04a6f156-0fed-4436-bcfa-889396972816",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cd3b94f-86d8-4371-bc21-bf121191e1ea",
            "e457f133-ed4a-4f5c-8e0d-37989eea19b8",
            "50b7badf-3843-458c-aa3e-3ad41d2ce7b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
          "title": "Remote- post single mock interaction",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.spec.js",
          "file": "/test/component/remote.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Remote- post single mock interaction\"",
              "fullTitle": "Remote- post single mock interaction \"before all\" hook in \"Remote- post single mock interaction\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.stub(helper, 'getCurrentTime').returns(\"123456\");\nmock.clearInteractions();\nid = await pactum.spec()\n  .post('http://localhost:9393/api/pactum/interactions')\n  .withJson([{\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      status: 200,\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: {\n        id: 1,\n        name: 'fake'\n      }\n    }\n  }])\n  .expectStatus(200)\n  .expectJsonLike([/\\w+/])\n  .returns('[0]');",
              "err": {},
              "uuid": "00021491-3463-465b-be73-c85120bfd6a3",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Remote- post single mock interaction\"",
              "fullTitle": "Remote- post single mock interaction \"after all\" hook in \"Remote- post single mock interaction\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nawait pactum.spec()\n  .delete(`http://localhost:9393/api/pactum/interactions?ids=${id}`)\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "f06121ff-c74c-4896-ac80-f5cbceb7b47d",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "get all mock interactions",
              "fullTitle": "Remote- post single mock interaction get all mock interactions",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/pactum/interactions')\n  .expectStatus(200)\n  .expectJson([\n    {\n      \"callCount\": 0,\n      \"exercised\": false,\n      \"calls\": [],\n      id,\n      \"strict\": true,\n      \"request\": {\n        \"matchingRules\": {},\n        \"method\": \"GET\",\n        \"path\": \"/api/projects/1\",\n        \"queryParams\": {}\n      },\n      \"response\": {\n        \"matchingRules\": {},\n        \"status\": 200,\n        \"headers\": {\n          \"content-type\": \"application/json\"\n        },\n        \"body\": {\n          \"id\": 1,\n          \"name\": \"fake\"\n        }\n      },\n      \"expects\": {\n        \"disable\": false,\n        \"exercised\": true\n      }\n    }\n  ])\n  .toss();",
              "err": {},
              "uuid": "fa913a93-343b-4644-83b8-cbf49dc1839f",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get single mock interaction",
              "fullTitle": "Remote- post single mock interaction get single mock interaction",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get(`http://localhost:9393/api/pactum/interactions?ids=${id}`)\n  .expectStatus(200)\n  .expectJson([\n    {\n      \"callCount\": 0,\n      \"exercised\": false,\n      \"calls\": [],\n      id,\n      \"strict\": true,\n      \"request\": {\n        \"matchingRules\": {},\n        \"method\": \"GET\",\n        \"path\": \"/api/projects/1\",\n        \"queryParams\": {}\n      },\n      \"response\": {\n        \"matchingRules\": {},\n        \"status\": 200,\n        \"headers\": {\n          \"content-type\": \"application/json\"\n        },\n        \"body\": {\n          \"id\": 1,\n          \"name\": \"fake\"\n        }\n      },\n      \"expects\": {\n        \"disable\": false,\n        \"exercised\": true\n      }\n    }\n  ])\n  .toss();",
              "err": {},
              "uuid": "a5b94658-34ed-4eb3-ab5c-855604c3a3f5",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "exercise single mock interaction",
              "fullTitle": "Remote- post single mock interaction exercise single mock interaction",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get(`http://localhost:9393/api/projects/1`)\n  .expectStatus(200)\n  .expectJson({\n    id: 1,\n    name: 'fake'\n  })\n  .toss();",
              "err": {},
              "uuid": "48a9b7c7-5419-474e-8f05-c4847961def5",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get single mock interaction after exercise",
              "fullTitle": "Remote- post single mock interaction get single mock interaction after exercise",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get(`http://localhost:9393/api/pactum/interactions?ids=${id}`)\n  .expectStatus(200)\n  .expectJson([\n    {\n      \"callCount\": 1,\n      \"exercised\": true,\n      \"calls\": [\n        {\n          \"request\": {\n            \"method\": \"GET\",\n            \"path\": \"/api/projects/1\",\n            \"query\": {},\n            \"headers\": {\n              \"host\": \"localhost:9393\",\n              \"connection\": \"close\"\n            },\n            \"body\": \"\"\n          },\n          \"exercisedAt\": \"123456\"\n        }\n      ],\n      id,\n      \"strict\": true,\n      \"request\": {\n        \"matchingRules\": {},\n        \"method\": \"GET\",\n        \"path\": \"/api/projects/1\",\n        \"queryParams\": {}\n      },\n      \"response\": {\n        \"matchingRules\": {},\n        \"status\": 200,\n        \"headers\": {\n          \"content-type\": \"application/json\"\n        },\n        \"body\": {\n          \"id\": 1,\n          \"name\": \"fake\"\n        }\n      },\n      \"expects\": {\n        \"disable\": false,\n        \"exercised\": true\n      }\n    }\n  ])\n  .toss();",
              "err": {},
              "uuid": "d2657a63-1459-4b84-a8ea-544203ab3b44",
              "parentUUID": "8ea69f04-b932-4e0a-9d83-78bbe9891f30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa913a93-343b-4644-83b8-cbf49dc1839f",
            "a5b94658-34ed-4eb3-ab5c-855604c3a3f5",
            "48a9b7c7-5419-474e-8f05-c4847961def5",
            "d2657a63-1459-4b84-a8ea-544203ab3b44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7f3dfa33-5480-4f8c-a459-eb122e232301",
          "title": "Remote- invalid requests",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.spec.js",
          "file": "/test/component/remote.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid url",
              "fullTitle": "Remote- invalid requests invalid url",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/pactum/invalid')\n  .expectStatus(404)\n  .expectBodyContains('404 Not Found')\n  .toss();",
              "err": {},
              "uuid": "e889ba79-598c-43ca-921d-6e7542d02324",
              "parentUUID": "7f3dfa33-5480-4f8c-a459-eb122e232301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid method",
              "fullTitle": "Remote- invalid requests invalid method",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .patch('http://localhost:9393/api/pactum/interactions')\n  .expectStatus(405)\n  .toss();",
              "err": {},
              "uuid": "38dad5c7-94c9-482b-ab35-7185b20bbbc4",
              "parentUUID": "7f3dfa33-5480-4f8c-a459-eb122e232301",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e889ba79-598c-43ca-921d-6e7542d02324",
            "38dad5c7-94c9-482b-ab35-7185b20bbbc4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "649b41a4-2ac4-4414-9b8b-d5c4cd41a421",
          "title": "Remote - Health",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.spec.js",
          "file": "/test/component/remote.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get health",
              "fullTitle": "Remote - Health get health",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .get('http://localhost:9393/api/pactum/health')\n  .expectStatus(200)\n  .expectBody('OK');",
              "err": {},
              "uuid": "9b84974c-0059-4c25-88bb-d79a2c3ff474",
              "parentUUID": "649b41a4-2ac4-4414-9b8b-d5c4cd41a421",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b84974c-0059-4c25-88bb-d79a2c3ff474"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b6548704-c595-44a0-9bce-b9abd9097849",
          "title": "Remote - Reporter",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.spec.js",
          "file": "/test/component/remote.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "reporter end - no reporters",
              "fullTitle": "Remote - Reporter reporter end - no reporters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/pactum/reporter/end')\n  .expectStatus(200);",
              "err": {},
              "uuid": "32fd8187-59cd-4c3a-aa79-2d7bb751e593",
              "parentUUID": "b6548704-c595-44a0-9bce-b9abd9097849",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reporter end - with reporter fails",
              "fullTitle": "Remote - Reporter reporter end - with reporter fails",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.reporter.add({\n  end() {\n    throw 'Some Error';\n  }\n});\nawait pactum.spec()\n  .post('http://localhost:9393/api/pactum/reporter/end')\n  .expectStatus(500);\npactum.reporter.get().length = 0;",
              "err": {},
              "uuid": "1848209a-2b37-45a9-a49c-32d3cdf34360",
              "parentUUID": "b6548704-c595-44a0-9bce-b9abd9097849",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32fd8187-59cd-4c3a-aa79-2d7bb751e593",
            "1848209a-2b37-45a9-a49c-32d3cdf34360"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2889f1c9-9ed1-4348-8154-69d3b207a061",
          "title": "Remote - State",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/remote.spec.js",
          "file": "/test/component/remote.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Remote - State\"",
              "fullTitle": "Remote - State \"before all\" hook in \"Remote - State\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addStateHandler('abc', () => { });\nhandler.addStateHandler('fail', ({ data }) => { if (data) throw 'abc'; });",
              "err": {},
              "uuid": "84d23f09-9535-40ea-8e79-5edf39c912d6",
              "parentUUID": "2889f1c9-9ed1-4348-8154-69d3b207a061",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "post empty data",
              "fullTitle": "Remote - State post empty data",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/pactum/state')\n  .expectStatus(200);",
              "err": {},
              "uuid": "5fafdbe3-d34b-4023-88b2-059818a8a552",
              "parentUUID": "2889f1c9-9ed1-4348-8154-69d3b207a061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "post with one invalid handler name should fail",
              "fullTitle": "Remote - State post with one invalid handler name should fail",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/pactum/state')\n  .withJson([\n    {\n      name: 'xyz'\n    }\n  ])\n  .expectStatus(400);",
              "err": {},
              "uuid": "f9e5279e-9ea2-4569-8e76-2fa7bde658e0",
              "parentUUID": "2889f1c9-9ed1-4348-8154-69d3b207a061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "post with one handler name should pass",
              "fullTitle": "Remote - State post with one handler name should pass",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/pactum/state')\n  .withJson([\n    {\n      name: 'abc'\n    }\n  ])\n  .expectStatus(200);",
              "err": {},
              "uuid": "58e83a85-8346-4061-a13d-04282e9d7544",
              "parentUUID": "2889f1c9-9ed1-4348-8154-69d3b207a061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "post with one handler name fails to run",
              "fullTitle": "Remote - State post with one handler name fails to run",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .post('http://localhost:9393/api/pactum/state')\n  .withJson([\n    {\n      name: 'fail',\n      data: true\n    }\n  ])\n  .expectStatus(400);",
              "err": {},
              "uuid": "457a202f-075b-4af6-bdea-186b78913335",
              "parentUUID": "2889f1c9-9ed1-4348-8154-69d3b207a061",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5fafdbe3-d34b-4023-88b2-059818a8a552",
            "f9e5279e-9ea2-4569-8e76-2fa7bde658e0",
            "58e83a85-8346-4061-a13d-04282e9d7544",
            "457a202f-075b-4af6-bdea-186b78913335"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9f4449df-b5cf-4285-b983-16abcc9f1f34",
          "title": "Reporter",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/reporter.spec.js",
          "file": "/test/component/reporter.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Reporter\"",
              "fullTitle": "Reporter \"before all\" hook in \"Reporter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reporter.add(jr);\nreporter.add(jrr);",
              "err": {},
              "uuid": "7cec1008-dcec-4063-a4a9-d860fb772a23",
              "parentUUID": "9f4449df-b5cf-4285-b983-16abcc9f1f34",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Reporter\"",
              "fullTitle": "Reporter \"after all\" hook in \"Reporter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await reporter.end();\nreporter.get().length = 0;",
              "err": {},
              "uuid": "76590180-6e60-4cd3-959b-332f102fc049",
              "parentUUID": "9f4449df-b5cf-4285-b983-16abcc9f1f34",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "90ffde98-7fc3-41b1-b17b-5b014c175065",
              "title": "Specs",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/reporter.spec.js",
              "file": "/test/component/reporter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "passed",
                  "fullTitle": "Reporter Specs passed",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "a68aba7e-e0c5-43e4-89c4-47ecb9ad0fec",
                  "parentUUID": "90ffde98-7fc3-41b1-b17b-5b014c175065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "failed",
                  "fullTitle": "Reporter Specs failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction('default get')\n    .get('http://localhost:9393/ohh')\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
                  "err": {},
                  "uuid": "82c3a658-8d97-4242-b565-42a309f112f0",
                  "parentUUID": "90ffde98-7fc3-41b1-b17b-5b014c175065",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a68aba7e-e0c5-43e4-89c4-47ecb9ad0fec",
                "82c3a658-8d97-4242-b565-42a309f112f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "31296d8d-60c3-40b4-a7d2-f4c2cadfc720",
              "title": "E2E",
              "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/reporter.spec.js",
              "file": "/test/component/reporter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "one step",
                  "fullTitle": "Reporter E2E one step",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.test.step('one step')\n  .spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectStatus(200);",
                  "err": {},
                  "uuid": "3260a9c0-fb86-4aa4-9f9d-ceef33ab3f9e",
                  "parentUUID": "31296d8d-60c3-40b4-a7d2-f4c2cadfc720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cleanup",
                  "fullTitle": "Reporter E2E cleanup",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.test.cleanup();",
                  "err": {},
                  "uuid": "531d78e4-0d2f-4631-a8f2-8e4e2d3af04d",
                  "parentUUID": "31296d8d-60c3-40b4-a7d2-f4c2cadfc720",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3260a9c0-fb86-4aa4-9f9d-ceef33ab3f9e",
                "531d78e4-0d2f-4631-a8f2-8e4e2d3af04d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "22648ae0-3e27-4758-a91c-520c06335681",
          "title": "Request",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/request.spec.js",
          "file": "/test/component/request.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Request\"",
              "fullTitle": "Request \"after each\" hook in \"Request\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "config.request.baseUrl = '';\nconfig.request.headers = {};",
              "err": {},
              "uuid": "ef5549f6-0946-44f4-8017-b52c24ca4cda",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "GET with baseurl",
              "fullTitle": "Request GET with baseurl",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/users'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('/users')\n  .expectStatus(200)\n  .inspect();",
              "err": {},
              "uuid": "9d5d7083-46f8-42fc-8c2c-9d7a67b510d5",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "OPTIONS with baseurl",
              "fullTitle": "Request OPTIONS with baseurl",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'OPTIONS',\n      path: '/users'\n    },\n    response: {\n      status: 204,\n      headers: {\n        'access-control-allow-methods': 'GET,HEAD,PUT,PATCH,POST,DELETE'\n      }\n    }\n  })\n  .options('/users')\n  .expectStatus(204)\n  .expectHeader(\n    'access-control-allow-methods',\n    'GET,HEAD,PUT,PATCH,POST,DELETE'\n  );",
              "err": {},
              "uuid": "c5ad1572-79e4-4d99-84e1-038abc043c9b",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TRACE with baseurl",
              "fullTitle": "Request TRACE with baseurl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'TRACE',\n      path: '/users'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .trace('/users')\n  .expectStatus(200);",
              "err": {},
              "uuid": "bff58929-9eeb-4b60-89d9-e7df28cd8422",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "withMethod & withPath",
              "fullTitle": "Request withMethod & withPath",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'HEAD',\n      path: '/users'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .withMethod('HEAD')\n  .withPath('/users')\n  .expectStatus(200);",
              "err": {},
              "uuid": "51094377-2bb3-497d-a7d3-b4b528f353e4",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with baseurl override",
              "fullTitle": "Request with baseurl override",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9392');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/users'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/users')\n  .expectStatus(200);",
              "err": {},
              "uuid": "dd33d234-90b8-4177-ae97-5bdd4ef47a1b",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default header",
              "fullTitle": "Request with default header",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nrequest.setDefaultHeaders('x', 'a');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/users',\n      headers: {\n        'x': 'a'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/users')\n  .expectStatus(200);",
              "err": {},
              "uuid": "c80519ef-1a7e-433b-974e-6fe88fa170d3",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with override default header to empty value",
              "fullTitle": "Request with override default header to empty value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nrequest.setDefaultHeaders('x', 'a');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/users',\n      headers: {\n        'x': ''\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/users')\n  .withHeaders('x', '')\n  .expectStatus(200);",
              "err": {},
              "uuid": "85fe7b8e-c84f-4e34-9924-678448efd323",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with override default header",
              "fullTitle": "Request with override default header",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setBaseUrl('http://localhost:9393');\nrequest.setDefaultHeaders('x', 'a');\nawait pactum\n  .spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/users',\n      headers: {\n        'x': 'b'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/users')\n  .withHeaders('x', 'b')\n  .expectStatus(200);",
              "err": {},
              "uuid": "e6876309-4845-4495-b452-02748c79bcc3",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with json - path",
              "fullTitle": "Request with json - path",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .useInteraction({\n    strict: false,\n    request: {\n      method: 'POST',\n      path: '/api/file',\n      body: {\n        \"name\": \"pactum\"\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/file')\n  .withJson('./package.json')\n  .expectStatus(200);",
              "err": {},
              "uuid": "4d316c93-75a7-4e69-b62f-f50ffd3e6a6c",
              "parentUUID": "22648ae0-3e27-4758-a91c-520c06335681",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d5d7083-46f8-42fc-8c2c-9d7a67b510d5",
            "c5ad1572-79e4-4d99-84e1-038abc043c9b",
            "bff58929-9eeb-4b60-89d9-e7df28cd8422",
            "51094377-2bb3-497d-a7d3-b4b528f353e4",
            "dd33d234-90b8-4177-ae97-5bdd4ef47a1b",
            "c80519ef-1a7e-433b-974e-6fe88fa170d3",
            "85fe7b8e-c84f-4e34-9924-678448efd323",
            "e6876309-4845-4495-b452-02748c79bcc3",
            "4d316c93-75a7-4e69-b62f-f50ffd3e6a6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "69752e54-5cfd-4754-ba9b-ec0f04558048",
          "title": "Response",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/response.spec.js",
          "file": "/test/component/response.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Response\"",
              "fullTitle": "Response \"after each\" hook in \"Response\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "config.response.status = null;\nconfig.response.time = null;\nresponse.removeDefaultExpectHeaders();\nresponse.removeDefaultExpectHandlers();",
              "err": {},
              "uuid": "6ff4aef8-a4dd-41b4-a169-dcf524f93a4b",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "with default expected response status",
              "fullTitle": "Response with default expected response status",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectStatus(200);\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get');",
              "err": {},
              "uuid": "c4e09527-72c1-4ddf-8ddc-28c4ff638125",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response status - failure",
              "fullTitle": "Response with default expected response status - failure",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectStatus(200);\nlet err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/default/get');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals('HTTP status 404 !== 200');",
              "err": {},
              "uuid": "84ab3a8c-e05c-4545-b0ac-c9559a535568",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response status - override value",
              "fullTitle": "Response with default expected response status - override value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectStatus(200);\nawait pactum.spec()\n  .get('http://localhost:9393/default/get')\n  .expectStatus(404);",
              "err": {},
              "uuid": "dcf14367-331f-4509-902b-69f1bf13b3b4",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response time",
              "fullTitle": "Response with default expected response time",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectResponseTime(1500);\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get');",
              "err": {},
              "uuid": "8a428968-fca2-4077-b7f9-3d3e57fc7f5a",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response time - failure",
              "fullTitle": "Response with default expected response time - failure",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectResponseTime(-1);\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction('default get')\n    .get('http://localhost:9393/default/get');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains('Request took longer than -1ms');",
              "err": {},
              "uuid": "926d3bb7-4693-481d-a17a-f88387b9a32c",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response time - override value",
              "fullTitle": "Response with default expected response time - override value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectResponseTime(-1);\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectResponseTime(1500);",
              "err": {},
              "uuid": "504bb78a-817d-4b15-8a91-0b5ab2356983",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response header",
              "fullTitle": "Response with default expected response header",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectHeaders('connection', 'close');\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get');",
              "err": {},
              "uuid": "95fc4445-208e-41aa-96ba-50243c17224d",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response header - failure",
              "fullTitle": "Response with default expected response header - failure",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectHeaders('connection', 'open');\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction('default get')\n    .get('http://localhost:9393/default/get');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`Header value 'open' did not match for header 'connection': 'close'`);",
              "err": {},
              "uuid": "c91eb587-93e6-4aa7-ad01-d60d22767e3d",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response header - override value",
              "fullTitle": "Response with default expected response header - override value",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectHeaders('connection', 'open');\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .expectHeader('connection', 'close');",
              "err": {},
              "uuid": "df14c5b5-19bb-4437-b6f0-50d89493c9d3",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response handler",
              "fullTitle": "Response with default expected response handler",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectHandlers(({ res }) => {\n  expect(res.statusCode).equals(200);\n});\nawait pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get');",
              "err": {},
              "uuid": "30a703d5-e353-42e6-8e88-e96e95a71f17",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with default expected response handler - failure",
              "fullTitle": "Response with default expected response handler - failure",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.setDefaultExpectHandlers(({ res }) => {\n  expect(res.statusCode).equals(200);\n});\nlet err;\ntry {\n  await pactum.spec()\n    .get('http://localhost:9393/default/get');\n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals('expected 404 to equal 200');",
              "err": {},
              "uuid": "4a62dce4-d4e5-4010-885a-224a8b4fec40",
              "parentUUID": "69752e54-5cfd-4754-ba9b-ec0f04558048",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4e09527-72c1-4ddf-8ddc-28c4ff638125",
            "84ab3a8c-e05c-4545-b0ac-c9559a535568",
            "dcf14367-331f-4509-902b-69f1bf13b3b4",
            "8a428968-fca2-4077-b7f9-3d3e57fc7f5a",
            "926d3bb7-4693-481d-a17a-f88387b9a32c",
            "504bb78a-817d-4b15-8a91-0b5ab2356983",
            "95fc4445-208e-41aa-96ba-50243c17224d",
            "c91eb587-93e6-4aa7-ad01-d60d22767e3d",
            "df14c5b5-19bb-4437-b6f0-50d89493c9d3",
            "30a703d5-e353-42e6-8e88-e96e95a71f17",
            "4a62dce4-d4e5-4010-885a-224a8b4fec40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
          "title": "Retries",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/retries.spec.js",
          "file": "/test/component/retries.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retries\"",
              "fullTitle": "Retries \"before all\" hook in \"Retries\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "settings.setRequestDefaultRetryCount(1);\nsettings.setRequestDefaultRetryDelay(1);",
              "err": {},
              "uuid": "18008f95-edc3-4672-8475-a93d7f227d9f",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Retries\"",
              "fullTitle": "Retries \"after all\" hook in \"Retries\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "settings.setRequestDefaultRetryCount(1);\nsettings.setRequestDefaultRetryDelay(1000);",
              "err": {},
              "uuid": "32a0572d-816d-4323-82a2-a17856707a7a",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "default retry",
              "fullTitle": "Retries default retry",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry()\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "2cdc5789-ac96-49dc-85d6-9512d3fa9958",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retry with custom count",
              "fullTitle": "Retries retry with custom count",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 202\n        },\n        2: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 3\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry(2)\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "561b210c-4394-44b6-9032-1fc11a2fef04",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retry with custom count & delay",
              "fullTitle": "Retries retry with custom count & delay",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry(3, 0)\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "8d3c463f-88fc-4d60-9348-20971fde6d26",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retry statuscode with array",
              "fullTitle": "Retries retry statuscode with array",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry({\n    delay: 1,\n    count: 1,\n    status: [202, 201],\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "0e526fbe-92e6-4410-b9ac-80857dc59375",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retry statuscode with single value",
              "fullTitle": "Retries retry statuscode with single value",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry({\n    delay: 1,\n    count: 1,\n    status: 202,\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "a764d0e6-5ce2-4550-90e6-35bd73e0532b",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retry strategy",
              "fullTitle": "Retries retry strategy",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry({\n    delay: 1,\n    count: 1,\n    strategy: ({ res }) => res.statusCode === 200\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "d48c63da-c29a-4724-9381-8334e0c68fba",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not retry with default retry options",
              "fullTitle": "Retries should not retry with default retry options",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 1\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry({\n    strategy: ({ res }) => res.statusCode === 200\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "7b20e0cf-2490-4b09-9acc-a07e54164b8d",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "custom retry strategy",
              "fullTitle": "Retries custom retry strategy",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addRetryHandler('RetryTill200', ({ res }) => res.statusCode === 200);\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/projects/1'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    }\n  })\n  .get('http://localhost:9393/api/projects/1')\n  .retry({\n    delay: 1,\n    count: 1,\n    strategy: 'RetryTill200'\n  })\n  .expectStatus(200)\n  .toss();",
              "err": {},
              "uuid": "5c0b22d4-8cce-4035-b99b-53d8260fde62",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unknown retry strategy",
              "fullTitle": "Retries unknown retry strategy",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/projects/1'\n      },\n      response: {\n        onCall: {\n          0: {\n            status: 202\n          },\n          1: {\n            status: 200\n          }\n        }\n      }\n    })\n    .get('http://localhost:9393/api/projects/1')\n    .retry({\n      delay: 1,\n      count: 1,\n      strategy: 'RetryTill400'\n    })\n    .expectStatus(200)\n    .toss();\n} catch (error) {\n  err = error;\n}\nexpect(err.message).contains(`Retry Handler Not Found - 'RetryTill400'`);",
              "err": {},
              "uuid": "aa1a5efd-741f-4075-84d1-cc83763a1115",
              "parentUUID": "9037e293-16bf-4ccd-bae6-a2a8fdf0de3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2cdc5789-ac96-49dc-85d6-9512d3fa9958",
            "561b210c-4394-44b6-9032-1fc11a2fef04",
            "8d3c463f-88fc-4d60-9348-20971fde6d26",
            "0e526fbe-92e6-4410-b9ac-80857dc59375",
            "a764d0e6-5ce2-4550-90e6-35bd73e0532b",
            "d48c63da-c29a-4724-9381-8334e0c68fba",
            "7b20e0cf-2490-4b09-9acc-a07e54164b8d",
            "5c0b22d4-8cce-4035-b99b-53d8260fde62",
            "aa1a5efd-741f-4075-84d1-cc83763a1115"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "87156068-512c-40f1-9a78-a8604bd01f66",
          "title": "Wait",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/retries.spec.js",
          "file": "/test/component/retries.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid wait with spec",
              "fullTitle": "Wait valid wait with spec",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/status'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 200\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/status')\n  .retry({\n    delay: 1,\n    count: 1,\n    strategy: ({ res }) => res.statusCode === 200\n  })\n  .expectStatus(200)\n  .toss();\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/wait'\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/wait')\n  .wait(spec)\n  .expectStatus(200);",
              "err": {},
              "uuid": "c293e3d2-7982-4e7c-bab8-d8b7aa652978",
              "parentUUID": "87156068-512c-40f1-9a78-a8604bd01f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid wait with spec",
              "fullTitle": "Wait invalid wait with spec",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/status'\n    },\n    response: {\n      onCall: {\n        0: {\n          status: 202\n        },\n        1: {\n          status: 400\n        }\n      }\n    },\n    expects: {\n      callCount: 2\n    }\n  })\n  .get('http://localhost:9393/api/status')\n  .retry({\n    delay: 1,\n    count: 1,\n    strategy: ({ res }) => res.statusCode === 200\n  })\n  .expectStatus(200)\n  .toss();\nlet err;\ntry {\n  await pactum.spec()\n    .useInteraction({\n      request: {\n        method: 'GET',\n        path: '/api/wait'\n      },\n      response: {\n        status: 200\n      }\n    })\n    .get('http://localhost:9393/api/wait')\n    .wait(spec)\n    .expectStatus(200);\n} catch (error) {\n  err = error;\n}\nexpect(err).not.undefined;",
              "err": {},
              "uuid": "e2482cae-476b-445d-8cd3-76f2019681fc",
              "parentUUID": "87156068-512c-40f1-9a78-a8604bd01f66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c293e3d2-7982-4e7c-bab8-d8b7aa652978",
            "e2482cae-476b-445d-8cd3-76f2019681fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
          "title": "Returns",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/returns.spec.js",
          "file": "/test/component/returns.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Returns\"",
              "fullTitle": "Returns \"after each\" hook in \"Returns\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "settings.setCaptureHandlerStrategy({ starts: '#' });",
              "err": {},
              "uuid": "f5654c1d-2a19-40b7-a834-3db51f75ebc7",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "default return value",
              "fullTitle": "Returns default return value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200);\nexpect(response.statusCode).equals(200);\nexpect(response.json).deep.equals({ id: 1 });",
              "err": {},
              "uuid": "17898efd-1f90-4e51-8bc6-3916b4ae9efe",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "custom return function",
              "fullTitle": "Returns custom return function",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns(({res}) => res.json.id);\nexpect(response).equals(1);",
              "err": {},
              "uuid": "0cba5e41-b2a2-4d69-8e4f-2c758d3f0fd8",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return with json query",
              "fullTitle": "Returns return with json query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns('id');\nexpect(response).equals(1);",
              "err": {},
              "uuid": "1abdbb26-195b-4f22-87c4-b1ec8a6d7a21",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return with custom handler function",
              "fullTitle": "Returns return with custom handler function",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addCaptureHandler('GetID', ({ res }) => res.json.id);\nconst response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns('#GetID');\nexpect(response).equals(1);\nsettings.setCaptureHandlerStrategy({ starts: '##' });\nconst response2 = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns('##GetID');\nexpect(response2).equals(1);",
              "err": {},
              "uuid": "0b3663f5-355b-4b36-b1ae-0fd34b1cd2db",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple returns",
              "fullTitle": "Returns multiple returns",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addCaptureHandler('GetID', ({ res }) => res.json.id);\nconst response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns('id')\n  .returns('#GetID');\nexpect(response).deep.equals([1, 1]);",
              "err": {},
              "uuid": "f1814685-84fa-4b06-9c39-60eaab8465da",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return response headers",
              "fullTitle": "Returns return response headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .expectStatus(200)\n  .returns('res.headers.connection');\nexpect(response).equals('close');",
              "err": {},
              "uuid": "8542e5c8-d109-466a-a93b-b0de6e034647",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return request headers",
              "fullTitle": "Returns return request headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction('default get')\n  .get('http://localhost:9393/default/get')\n  .withHeaders('trace-id', 'xyz')\n  .expectStatus(200)\n  .returns('req.headers.trace-id');\nexpect(response).equals('xyz');",
              "err": {},
              "uuid": "1d279a2c-a07d-4b77-aa8a-bc66de6b8983",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "return request body",
              "fullTitle": "Returns return request body",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum.spec()\n  .useInteraction('default post')\n  .post('http://localhost:9393/default/post')\n  .withBody({\n    method: 'POST',\n    path: '/default/post'\n  })\n  .expectStatus(200)\n  .returns('req.body.method');\nexpect(response).equals('POST');",
              "err": {},
              "uuid": "cac9cfe4-25b7-441f-9d6c-1c9cfc50863f",
              "parentUUID": "877b93bf-4a9f-411c-b0bf-f4940b7d65de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17898efd-1f90-4e51-8bc6-3916b4ae9efe",
            "0cba5e41-b2a2-4d69-8e4f-2c758d3f0fd8",
            "1abdbb26-195b-4f22-87c4-b1ec8a6d7a21",
            "0b3663f5-355b-4b36-b1ae-0fd34b1cd2db",
            "f1814685-84fa-4b06-9c39-60eaab8465da",
            "8542e5c8-d109-466a-a93b-b0de6e034647",
            "1d279a2c-a07d-4b77-aa8a-bc66de6b8983",
            "cac9cfe4-25b7-441f-9d6c-1c9cfc50863f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5cbebe09-df82-4e39-ba0e-d23c3757f3ae",
          "title": "Save",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/save.spec.js",
          "file": "/test/component/save.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "save json file",
              "fullTitle": "Save save json file",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .useInteraction('get people')\n  .get('http://localhost:9393/api/people')\n  .save('.pactum/users.json')\n  .expectStatus(200);",
              "err": {},
              "uuid": "c859da41-756e-4247-bd18-df9fcfaecb71",
              "parentUUID": "5cbebe09-df82-4e39-ba0e-d23c3757f3ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c859da41-756e-4247-bd18-df9fcfaecb71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d1614977-df72-4889-a679-8b56b99bbcc6",
          "title": "Spec Handler",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/spec.handler.spec.js",
          "file": "/test/component/spec.handler.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Spec Handler\"",
              "fullTitle": "Spec Handler \"before all\" hook in \"Spec Handler\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addInteractionHandler('get users', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/api/users'\n    },\n    response: {\n      status: 200,\n      body: [\n        {\n          id: 1\n        },\n        {\n          id: 2\n        }\n      ]\n    }\n  };\n});\nhandler.addInteractionHandler('get user one', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/api/users/1'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  };\n});\nhandler.addSpecHandler('get users', (ctx) => {\n  const spec = ctx.spec;\n  spec.useInteraction('get users');\n  spec.get('http://localhost:9393/api/users');\n});\nhandler.addSpecHandler('get user', (ctx) => {\n  const spec = ctx.spec;\n  spec.useInteraction('get user one');\n  spec.get('http://localhost:9393/api/users' + `/${ctx.data}`);\n});",
              "err": {},
              "uuid": "d08f3f7e-0339-498c-8eab-440dc1bf328d",
              "parentUUID": "d1614977-df72-4889-a679-8b56b99bbcc6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "get users",
              "fullTitle": "Spec Handler get users",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec('get users')\n  .expectStatus(200)\n  .expectJson([\n    {\n      id: 1\n    },\n    {\n      id: 2\n    }\n  ]);",
              "err": {},
              "uuid": "caa1e688-4e53-4679-a985-ecb01d639308",
              "parentUUID": "d1614977-df72-4889-a679-8b56b99bbcc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get user one",
              "fullTitle": "Spec Handler get user one",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec('get user', 1)\n  .expectStatus(200)\n  .expectJson({\n    id: 1\n  });",
              "err": {},
              "uuid": "ecce4305-1e70-47bf-abb1-ef6230f4450a",
              "parentUUID": "d1614977-df72-4889-a679-8b56b99bbcc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get user one - use",
              "fullTitle": "Spec Handler get user one - use",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .use('get user', 1)\n  .expectStatus(200)\n  .expectJson({\n    id: 1\n  });",
              "err": {},
              "uuid": "a5897f53-f451-45df-b1dd-913ad56f7ce5",
              "parentUUID": "d1614977-df72-4889-a679-8b56b99bbcc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "caa1e688-4e53-4679-a985-ecb01d639308",
            "ecce4305-1e70-47bf-abb1-ef6230f4450a",
            "a5897f53-f451-45df-b1dd-913ad56f7ce5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "33e8606a-33b7-4303-8d4e-74bf3b8b16c0",
          "title": "State",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/states.spec.js",
          "file": "/test/component/states.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"State\"",
              "fullTitle": "State \"before all\" hook in \"State\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "handler.addStateHandler('there is a project with id', (ctx) => {\n  const spec = ctx.spec;\n  const id = ctx.data;\n  spec.useInteraction({\n    request: {\n      method: 'GET',\n      path: `/api/projects/${id}`\n    },\n    response: {\n      status: 200,\n      body: { id }\n    }\n  });\n});\nhandler.addStateHandler('there is a user with id', (ctx) => {\n  mock.addInteraction({\n    request: {\n      method: 'GET',\n      path: `/api/users/${ctx.data}`\n    },\n    response: {\n      status: 200\n    }\n  })\n})",
              "err": {},
              "uuid": "81efaa15-bad3-4b9e-a630-0c8092b34807",
              "parentUUID": "33e8606a-33b7-4303-8d4e-74bf3b8b16c0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "using a single sate in multiple specs",
              "fullTitle": "State using a single sate in multiple specs",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .setState('there is a project with id', 99)\n  .get('http://localhost:9393/api/projects/99')\n  .expectJson({\n    id: 99\n  });\nawait pactum.spec()\n  .setState('there is a project with id', 98)\n  .get('http://localhost:9393/api/projects/98')\n  .expectJson({\n    id: 98\n  });\nawait pactum.spec()\n  .get('http://localhost:9393/api/projects/99')\n  .expectStatus(404);",
              "err": {},
              "uuid": "8f1ca8f3-ef16-449a-91e9-a0afe9b40c38",
              "parentUUID": "33e8606a-33b7-4303-8d4e-74bf3b8b16c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "state not found",
              "fullTitle": "State state not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let err;\ntry {\n  await pactum.spec()\n  .setState('invalid state')\n  .get('http://localhost:9393/api/projects/98')\n  .expectJson({\n    id: 98\n  });  \n} catch (error) {\n  err = error;\n}\nexpect(err.message).equals(`State Handler Not Found - 'invalid state'`);",
              "err": {},
              "uuid": "4966b7cf-a1cd-42df-9585-18bfe4dcd54c",
              "parentUUID": "33e8606a-33b7-4303-8d4e-74bf3b8b16c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "set state from state object",
              "fullTitle": "State set state from state object",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await state.set('there is a user with id', 10);\nawait pactum.spec()\n  .get('http://localhost:9393/api/users/10')\n  .expectStatus(200);",
              "err": {},
              "uuid": "9a157c35-7597-4d6d-a851-00a956e20c86",
              "parentUUID": "33e8606a-33b7-4303-8d4e-74bf3b8b16c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f1ca8f3-ef16-449a-91e9-a0afe9b40c38",
            "4966b7cf-a1cd-42df-9585-18bfe4dcd54c",
            "9a157c35-7597-4d6d-a851-00a956e20c86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
          "title": "Stores",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/stores.spec.js",
          "file": "/test/component/stores.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stores\"",
              "fullTitle": "Stores \"before all\" hook in \"Stores\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addInteractionHandler('get stores', () => {\n  return {\n    request: {\n      method: 'GET',\n      path: '/api/stores'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  };\n});\naddInteractionHandler('post stores', () => {\n  return {\n    request: {\n      method: 'POST',\n      path: '/api/stores',\n      body: {\n        UserId: 1\n      }\n    },\n    response: {\n      status: 200\n    }\n  };\n});\naddInteractionHandler('post stores with id', () => {\n  return {\n    request: {\n      method: 'POST',\n      path: '/api/stores/1'\n    },\n    response: {\n      status: 200\n    }\n  };\n});",
              "err": {},
              "uuid": "4d596162-b886-4603-a3a7-a6eb5aa8c9bf",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Stores\"",
              "fullTitle": "Stores \"after each\" hook in \"Stores\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stash.clearDataStores();",
              "err": {},
              "uuid": "88fd729e-3a87-4055-860a-40619d568654",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "store single value",
              "fullTitle": "Stores store single value",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction('get stores')\n  .get('http://localhost:9393/api/stores')\n  .expectStatus(200)\n  .stores('UserId', 'id');\nawait pactum.spec()\n  .useInteraction('post stores')\n  .post('http://localhost:9393/api/stores')\n  .withJson({\n    UserId: '$S{UserId}'\n  })\n  .expectStatus(200);\nawait pactum.spec()\n  .useInteraction('post stores with id')\n  .post('http://localhost:9393/api/stores/$S{UserId}')\n  .expectStatus(200);",
              "err": {},
              "uuid": "b274ab97-8696-494b-a391-8132d05fa0b7",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "store multiple value",
              "fullTitle": "Stores store multiple value",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/stores'\n    },\n    response: {\n      status: 200,\n      body: [\n        {\n          id: 1,\n          name: 'Jon'\n        },\n        {\n          id: 2,\n          name: 'Snow'\n        }\n      ]\n    }\n  })\n  .get('http://localhost:9393/api/stores')\n  .expectStatus(200)\n  .stores('FirstUser', '[0]')\n  .stores('SecondUser', '[1]');\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/stores',\n      body: {\n        UserId: 1\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/stores')\n  .withJson({\n    UserId: '$S{FirstUser.id}'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "7944633e-0f3f-462b-b25b-a2f5c6288708",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid spec reference",
              "fullTitle": "Stores invalid spec reference",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/stores',\n      body: {\n        UserId: '$S{Unknown}'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/stores')\n  .withJson({\n    UserId: '$S{Unknown}'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "7293d419-45cf-4919-80b5-914b3b03a5be",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "store single value - capture handlers",
              "fullTitle": "Stores store single value - capture handlers",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "pactum.handler.addCaptureHandler('GetID', ({ res }) => res.json.id);\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/stores'\n    },\n    response: {\n      status: 200,\n      body: {\n        id: 1\n      }\n    }\n  })\n  .get('http://localhost:9393/api/stores')\n  .expectStatus(200)\n  .stores('CapturedUserId', '#GetID');\nawait pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/stores',\n      body: {\n        UserId: 1\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/stores')\n  .withJson({\n    UserId: '$S{CapturedUserId}'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "41959c43-2be8-4443-a5c3-84009fe1ab07",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "store single value after response",
              "fullTitle": "Stores store single value after response",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spec = pactum.spec();\nawait spec\n  .useInteraction('get stores')\n  .get('http://localhost:9393/api/stores')\n  .expectStatus(200);\nspec.stores('UserId', 'id');\nawait pactum.spec()\n  .useInteraction('post stores')\n  .post('http://localhost:9393/api/stores')\n  .withJson({\n    UserId: '$S{UserId}'\n  })\n  .expectStatus(200);\nawait pactum.spec()\n  .useInteraction('post stores with id')\n  .post('http://localhost:9393/api/stores/$S{UserId}')\n  .expectStatus(200);",
              "err": {},
              "uuid": "302b3dc5-6772-48e6-bde9-6cb202dfbfcf",
              "parentUUID": "07f5eee1-d8e5-4e70-9d87-39e3151be689",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b274ab97-8696-494b-a391-8132d05fa0b7",
            "7944633e-0f3f-462b-b25b-a2f5c6288708",
            "7293d419-45cf-4919-80b5-914b3b03a5be",
            "41959c43-2be8-4443-a5c3-84009fe1ab07",
            "302b3dc5-6772-48e6-bde9-6cb202dfbfcf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
          "title": "Templates & Maps",
          "fullFile": "/Users/MU/Documents/jenkinsPractice-01/test/component/templates.spec.js",
          "file": "/test/component/templates.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Templates & Maps\"",
              "fullTitle": "Templates & Maps \"before all\" hook in \"Templates & Maps\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stash.loadData('./test/data');\nstash.addDataTemplate({\n  'User.NewUser': {\n    FirstName: 'Jon',\n    LastName: 'Snow',\n    Country: '$M{User.Country}',\n    Addresses: []\n  },\n  'User.Address': {\n    Castle: 'WinterFell',\n    Realm: 'The North'\n  }\n});\nstash.addDataMap({\n  User: {\n    FirstName: 'Jon',\n    LastName: 'Snow',\n    Country: 'North'\n  },\n  Castle: {\n    Wall: 'Castle Black'\n  }\n});\nstash.addDataMap([]);\nstash.addDataTemplate([]);\npactum.handler.addDataFuncHandler('GetZero', () => 0);\npactum.handler.addDataFuncHandler('GetAuthToken', () => 'Basic xyz');\npactum.handler.addDataFuncHandler('GetNumber', (ctx) => ctx.args[0]);\npactum.handler.addDataFuncHandler('GetSum', (ctx) => parseInt(ctx.args[0]) + parseInt(ctx.args[1]));",
              "err": {},
              "uuid": "0960bbce-16fa-415e-aa84-56a8c2d261f9",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Templates & Maps\"",
              "fullTitle": "Templates & Maps \"after all\" hook in \"Templates & Maps\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "stash.clearDataTemplates();\nstash.clearDataMaps();",
              "err": {},
              "uuid": "ac96a19f-8e78-48f5-bb3a-b731a2beaee8",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "new user with pure template",
              "fullTitle": "Templates & Maps new user with pure template",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/users',\n      body: {\n        FirstName: 'Jon',\n        LastName: 'Snow',\n        Country: 'North',\n        Addresses: []\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/users')\n  .withJson({\n    '@DATA:TEMPLATE@': 'User.NewUser'\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "16ea49d3-c807-44cf-9f35-e35c7d456fa0",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new user with pure - override existing property",
              "fullTitle": "Templates & Maps new user with pure - override existing property",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/users',\n      body: {\n        FirstName: 'Jon',\n        LastName: 'Dragon',\n        Country: 'North',\n        Addresses: []\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/users')\n  .withJson({\n    '@DATA:TEMPLATE@': 'User.NewUser',\n    '@OVERRIDES@': {\n      LastName: 'Dragon'\n    }\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "c167c108-854d-4368-8ad1-0c32bc7d4a8d",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new user with pure - override existing property with template & map",
              "fullTitle": "Templates & Maps new user with pure - override existing property with template & map",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/users',\n      body: {\n        FirstName: 'Jon',\n        LastName: 'Snow',\n        Country: 'North',\n        Age: 0,\n        Addresses: [\n          {\n            Castle: 'WinterFell',\n            Realm: 'The North'\n          }\n        ]\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/users')\n  .withJson({\n    '@DATA:TEMPLATE@': 'User.NewUser',\n    '@OVERRIDES@': {\n      Age: '$F{GetZero}',\n      Addresses: [\n        {\n          '@DATA:TEMPLATE@': 'User.Address'\n        }\n      ]\n    }\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "0babedfb-b2f7-4410-a993-674526c7ec76",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new user with pure - nested override",
              "fullTitle": "Templates & Maps new user with pure - nested override",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/users',\n      body: {\n        FirstName: 'Jon',\n        LastName: 'Snow',\n        Country: 'North',\n        Addresses: [\n          {\n            Castle: 'Castle Black',\n            Realm: 'The North'\n          }\n        ]\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/users')\n  .withJson({\n    '@DATA:TEMPLATE@': 'User.NewUser',\n    '@OVERRIDES@': {\n      Addresses: [\n        {\n          '@DATA:TEMPLATE@': 'User.Address',\n          '@OVERRIDES@': {\n            Castle: '$M{Castle.Wall}'\n          }\n        }\n      ]\n    }\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "856635f6-5c84-4268-a034-33713e38cbe5",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data ref in query & headers",
              "fullTitle": "Templates & Maps data ref in query & headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users',\n      queryParams: {\n        age: 0,\n        mass: 10\n      },\n      headers: {\n        'Authorization': 'Basic xyz'\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .withQueryParams('age', '$F{GetNumber:0}')\n  .withQueryParams('mass', '$F{GetSum:3,7}')\n  .withHeaders('Authorization', '$F{GetAuthToken}')\n  .expectStatus(200);",
              "err": {},
              "uuid": "3e039f0a-94b8-47b5-980a-4b6afe2ef1bd",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mock using data reference in query & headers",
              "fullTitle": "Templates & Maps mock using data reference in query & headers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/users',\n      queryParams: {\n        name: '$M{User.FirstName}'\n      }\n    },\n    response: {\n      status: 200,\n      headers: {\n        'Authorization': '$F{GetAuthToken}'\n      },\n      body: {\n        '@DATA:TEMPLATE@': 'User.NewUser'\n      }\n    }\n  })\n  .get('http://localhost:9393/api/users')\n  .withQueryParams({ name: 'Jon' })\n  .expectHeader('authorization', 'Basic xyz')\n  .expectJson({\n    FirstName: 'Jon',\n    LastName: 'Snow',\n    Country: 'North',\n    Addresses: []\n  });",
              "err": {},
              "uuid": "55f043e7-b409-496b-a69e-79d273d55a75",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "post new army from a template in fs",
              "fullTitle": "Templates & Maps post new army from a template in fs",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'POST',\n      path: '/api/army',\n      body: {\n        \"Name\": \"Golden Army\",\n        \"Count\": 10000,\n        \"Alliance\": \"Stark\",\n        \"Cavalry\": \"$M{Unknown}\"\n      }\n    },\n    response: {\n      status: 200\n    }\n  })\n  .post('http://localhost:9393/api/army')\n  .withJson({\n    '@DATA:TEMPLATE@': 'Army:New',\n    '@OVERRIDES@': {\n      'Cavalry': '$M{Unknown}'\n    }\n  })\n  .expectStatus(200);",
              "err": {},
              "uuid": "292ad7dc-bc8e-488e-9bec-346d2107f8cd",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "expect schema from a template in fs",
              "fullTitle": "Templates & Maps expect schema from a template in fs",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n  .useInteraction({\n    request: {\n      method: 'GET',\n      path: '/api/army'\n    },\n    response: {\n      status: 200,\n      body: {\n        \"Name\": \"Golden Army\",\n        \"Count\": 10000,\n        \"Alliance\": \"Stark\"\n      }\n    }\n  })\n  .get('http://localhost:9393/api/army')\n  .expectStatus(200)\n  .expectJsonSchema({\n    '@DATA:TEMPLATE@': 'Schema:Army'\n  });",
              "err": {},
              "uuid": "3269e1be-1756-4bd0-a7b0-c59dd7591554",
              "parentUUID": "8f38b406-3c8c-4c7c-9fe1-c1e3e95a0963",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16ea49d3-c807-44cf-9f35-e35c7d456fa0",
            "c167c108-854d-4368-8ad1-0c32bc7d4a8d",
            "0babedfb-b2f7-4410-a993-674526c7ec76",
            "856635f6-5c84-4268-a034-33713e38cbe5",
            "3e039f0a-94b8-47b5-980a-4b6afe2ef1bd",
            "55f043e7-b409-496b-a69e-79d273d55a75",
            "292ad7dc-bc8e-488e-9bec-346d2107f8cd",
            "3269e1be-1756-4bd0-a7b0-c59dd7591554"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}